<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Auto Minesweeper</title>
      <link href="/2020/04/08/connect6/"/>
      <url>/2020/04/08/connect6/</url>
      
        <content type="html"><![CDATA[<p>很多版代码之后，当前x.y版codebiluo终于可以和我来一局焦灼的对局了！！！</p><p>这一次的课设题目是自动六子棋，理解题目之后我就直接投身到论文的海洋，看了一段时间论文之后，初步确定自己先使用<strong>基于“路”的博弈树搜索</strong>，之后会详细讨论论文中出现的几种方法，以及我眼中各个方法之间的优劣。这篇博客主要是叙述（也是自己复习，毕竟我连α-β剪枝都打错了😭）<strong>代码中用到的新知识、论文中涉及的方法以及阅读顺序建议</strong>。</p><h4 id="一、简述问题与思路"><a href="#一、简述问题与思路" class="headerlink" title="一、简述问题与思路"></a>一、简述问题与思路</h4><p>六子棋对战是一个棋手双方博弈的过程，最终的目的就是根据当前的棋局确定下一步着法。一般首先想到的是遍历每一种着棋组合，对其评估，然后得到较优的解，这也是一般人下棋的策略；但是高手往往能知道对手的想法，<em>预判对手的着棋，甚至是预判对手的预判</em>。做到这一点，就是通过<strong>博弈树</strong>来实现。</p><p>知道了博弈树，就要了解该如何对博弈树进行搜索的问题。博弈树一般使用<strong>极大极小搜索方法</strong>或者是<strong>α-β搜索方法</strong>，后者是对前者的优化。我在编写代码时先编写了前者，到后者的改变实际只有四行代码。</p><p>博弈树中的每一个节点，对应了一个棋局，想要完成博弈，人类是通过对棋局进行感性的分析，而机器则是需要得到一个理性的结果，这个理性的结果就是对棋局的<strong>评估值</strong>，由<strong>评估函数</strong>得到。</p><p>想要评估棋局，最重要的是确定通过怎样的方式的到棋局的特征。在六子棋中，主要有<strong>基于“路”</strong>和<strong>基于“连珠”</strong>两种方式，我对二者的评价是：前者代码编写更容易，但只是得到了局部棋局的特征；后者分析棋局更加全面，与前者博弈时或许胜率会更高。所以我使用了基于“路”的方法😂。</p><p>以上加粗字，是截至4.8，connect6程序所使用的基本方法，下文中将对这些新知识进行介绍。</p><h4 id="二、评估函数"><a href="#二、评估函数" class="headerlink" title="二、评估函数"></a>二、评估函数</h4><p>不同的棋局有着不一样的特征，我们需要通过分析棋局的特征，确定当前棋局对自己的有利程度，以及着棋之后棋局对自己的有利程度，从而得出该如何着棋。人类感性的评价计算机无法实现，我们需要做的是将感性的认识转换为理性的分析，从而评估一个棋局。</p><p>相关文献中从两个角度分析棋局，“路”与“连珠”，两个角度各有优劣，下面进行介绍，</p><h5 id="（一）基于”路“的评估函数"><a href="#（一）基于”路“的评估函数" class="headerlink" title="（一）基于”路“的评估函数"></a>（一）基于”路“的评估函数</h5><p>所谓“路”就是指在棋盘上存在连续6个可能连成一线的点位<a href="文献一">[1]</a>。也就是说，在水平、竖直、斜45°、斜135°的某个方向上，连续六个交叉点中黑子/白子的棋形称为“路”。</p><p>关于“路”的定义并不是很清晰，转化为代码的实现会更容易理解，从某一个交叉点开始，向四个个方向分别遍历六个交叉点（包括起点），记录黑子与白子的个数为B与W，分类讨论B和W的大小：如B、W都不为0，即两种棋子在这六个交叉点中同时出现，则将这一路定义为空路；如B、W都为0，即六个交叉点中没有任意一种棋子，则将这一路定义为空路；如B、W中不为0的一方的棋子数目为S，颜色为C，则将这一路定义为C S路，如白三路，黑四路。</p><p>根据“路”的定义，分析棋局可以知道，水平、竖直方向上共有19·(19-5)条路，斜45°、斜135°方向上共有(19-5)·(19-5)条路，也就是说六子棋19x19交叉点棋局进行全局扫描的总路数是924。这个数据在之后介绍局面的局部扫描时还会提到。</p><p>路的颜色为黑/白/空，路的数目为1、…、6，<strong>参考文献<a href="">[2]</a>中给出了基于“路”的评估函数：</strong><br>$$<br>Score=Σ<em>{i=1}^6(MyRoadNum[i]*RoadScore[i])-Σ</em>{i=1}^6(OpRoadNum[i]*RoadScore[i])<br>$$<br>Score为对当前局面的评估值，MyRoadNum[i]为棋局中C为执棋方棋子颜色，S=i的路的总数，OpRoadNum[i]为棋局中C为对手棋子颜色，S=i的路的总数，RoadScore[i]为S=i的路所对应的在棋局中的权重。下面分析权重系数以及评估函数：</p><p>不同的路对棋局的影响是不同的，易知，S越大，C S路对棋局的影响越大。为了在评估函数中表现出这一点，使用的方法就是S越大，对应的权重系数越大，通过经验得到初步的权重系数：<strong>{1,5,10,25,35,10000}</strong>。权重系数的作用就是表现对应种类的路对棋局的影响。</p><p>分析评估函数之前，首先假定，<strong>对于当前执棋方，评估值Score越大，表明当前棋局对自己更有利。</strong>在此基础上，评估函数就可以用下面的一段话来理解：<strong>执棋方颜色的路越多、对应权重系数大的路越多，则评估函数中前一个求和项的数值更大，表明棋局对执棋方更加有利；对手方颜色的路越少、对应权重系数大的路越少，则评估函数中后一个求和项的数值更大，表明棋局对执棋方更加不利。</strong>（最开始阅读论文的时候我并不理解这个评估函数，一直想不通为什么对手方的权重系数也是递增的，直到有一天下午灵光一现，理解了这个评估函数的意义）</p><h5 id="（二）基于”连珠“的评估函数"><a href="#（二）基于”连珠“的评估函数" class="headerlink" title="（二）基于”连珠“的评估函数"></a>（二）基于”连珠“的评估函数</h5><p>在一个区间中,所有的同色的交叉点构成的序列,称为连珠。连珠是与一般人思考方式相近的一种棋局特征的表达，比如在五子棋中有活三、眠3等术语，对应了不同的着棋策略。五子棋中的策略可以类比到六子棋，比如对于着棋方的活四或活五，应采取直接落子在活四两端；对手方的活三，倾向于在其一端落下一子，将其转换为眠三，这样就算对手想要继续在这一连珠做文章，最多也只能达到眠5……</p><p>连珠可以表现某一棋形的连通程度、对手的威胁以及棋形的进攻防守能力，基于这三方面，可以将连珠进行分类。除此之外，连珠还有很重要的一点就是不同种类连珠之间的演化，比如上面举出的眠三落两子变为眠五，活四落两子可以冲六等等，记录他们之间的演化可以加快对局面的分析，从而加速搜索。</p><p><strong>参考文献<a href="">[3]</a></strong>详细介绍了基于连珠模式的六子棋博弈系统，其中提到连珠形状共有1048512种，通过上面三种方面可以将连珠分成12种类型，并通过一个经过论证的hash函数，可以完成连珠形状搜索的加速。这篇论文中还涉及很多本文中没有提到的搜索方法以及一些优化策略，十分建议阅读，但是伴随的问题是论文涉及的技术太多，想要短时间复现代码实在困难，所以在部分阅读之后我没有选择基于“连珠”的方法。</p><p>基于”连珠“的评估函数也可以使用与基于“路”的评估函数相同的方法，即<strong>评估值等于不同类型连珠的加权和</strong>。但是参考文献<a href="">[3]</a>中先从三个方面对局面进行评估：首先是<strong>开局阶段对于静态位置的评估</strong>，这一点是根据经验，<em>先脱离双方激烈拼杀区域者将处于劣势，</em>故<strong>设置第一枚落子一定在天元，同时添加一个位置偏移表，来保证棋局以中心开局</strong>；其次考虑不同连珠的权重，还是使用类似“路”估值函数的加权和形式，但是作者使用了<strong>先对第一个落子进行评估，然后根据第一个落子下落后的局面评估值，指导第二个落子的下落</strong>，其他论文都是采用两枚棋子落下之后的局面进行评估，下文α-β搜索方法中会说明这么做的意义；最后一点是动态因素的估值，这部分在我看来是个性化的判断，<del>比如说本来已经要赢了，但是偏偏不下在终结棋局的位置，反而落子到其他位置，略略略</del>，其实是我并不太理解动态因素的估值。同时论文中还提到基于交叉点的评估，这一步是<strong>将可选点进行桶排序，每一次博弈从有序着棋点序列中选择着棋点，</strong>这个方法可以对搜索进行极大的优化，我可能会在之后的优化中使用这个方法。</p><h5 id="（三）基于“路”的局部扫描方式"><a href="#（三）基于“路”的局部扫描方式" class="headerlink" title="（三）基于“路”的局部扫描方式"></a>（三）基于“路”的局部扫描方式</h5><p>上文提到六子棋19x19交叉点棋局进行全局扫描的总路数是924，乍一看这并不是一个很大的数字，因为总共访问的交叉点个数也就是924(路)·4(方向数)·6(每个方向访问的交叉点数目)=22176个交叉点。但是当考虑到其庞大的子节点个数的时候，这个数字就变得非常恐怖。<strong>参考文献<a href="">[4]</a></strong>就提出了基于“路”的局部扫描方式，这个方法是从当前局面出发，对不同的着棋点进行模拟落子，在新的局面中，模拟落子只会影响它四个方向上的各条路。假设父节点原本的评估值为Vtotal，受影响的路原本的评估值为Vbefor，受影响的路落子后的评估值为Vafter，落子后局面的评估值Vtotal’也就是：<br>$$<br>V_{total}’=V_{total}-V_{befor}+V_{after}<br>$$<br>全局扫描不难，按照定义逐个方向扫描即可，只需要注意不要重复计算同一个路即可。</p><h4 id="三、博弈树及其搜索方法"><a href="#三、博弈树及其搜索方法" class="headerlink" title="三、博弈树及其搜索方法"></a>三、博弈树及其搜索方法</h4><h5 id="（一）博弈树"><a href="#（一）博弈树" class="headerlink" title="（一）博弈树"></a>（一）博弈树</h5><p>最开始在论文中看到博弈树，我想起之前学过的决策树，这两者之间的关系可以用下面这段话来表示：</p><blockquote><p>决策树适用于一个人面临各种选择时的描述分析，而博弈树则适用于多个参与者在一场策略博弈中的决策次序的描述分析。</p></blockquote><p>完整的博弈树，考虑到从开局落下第一个子，到最终无论是和局，还是输赢的所有过程，想象这样一个画面，确定第一个落子为天元，开局局面为根节点，之后的落子为任意的两个交叉点，第二层就有大约19^4个节点，这仅仅是第二层，第二层每个节点之下又会有大约19^4个节点，<strong>完整的博弈树，是无法想象的庞大</strong>（当然只是笼统的统计）。所以实际编程时，我们实际是生成一颗搜索树——博弈树的子树。（但下文有时仍然使用博弈树，但需要知道，下文的博弈树仅仅是完整博弈树的一个小小子树）</p><p>博弈树中用树的各层来表示对弈双方：<strong>第一层为初始局面，表示着棋方，第二层也就是对手，以此类推，也就是奇数层代表着棋方，偶数层代表对手。</strong>树的节点来表示各种棋局，节点之间的连线可以想象成着棋的动作。最终目标是着棋方选择从初始局面（第一层）转换到第二层中的哪一个局面；为更好的达到这一个目标，就需要通过分析自己落子之后，对手会如何落子（从第二层到第三层）；更进一步，还要分析在对手落子之后，我还会怎么做（第三层到第四层）；以此类推，这样的过程有些像<em>博弈论中的共同知识</em>——我知道，你知道，我知道你知道，你知道我知道你知道……</p><p>对于着棋方而言，希望能放大自己的优势，或者是缩小自己的劣势；对于对手而言，希望能缩小着棋方的优势，后者是放大着棋方的优势，这些都是通过对比不同落子的局面评估值之间的关系来实现的。<strong>着棋方（奇数层）遍历自己的各种着棋可能，计算他们的评估值，并将自己的评估值更新为子节点评估值中的最大值，故称奇数层为MAX层；而对手（偶数层）也是遍历自己的各种着棋可能，计算他们的评估值，并将自己的评估值更新为子节点评估值中的最小值，称为MIN层。</strong></p><p>通过上面这个概念，也就引出了博弈树的一种搜索方法——极大极小搜索。</p><h5 id="（二）极大极小搜索"><a href="#（二）极大极小搜索" class="headerlink" title="（二）极大极小搜索"></a>（二）极大极小搜索</h5><p>极大极小搜索的过程类似于深搜，只不过前者给每一层节点添加了一个MAX/MIN的属性，根据这个属性决定自己节点的值（除了叶节点）。具体的过程如下：</p><p>对一颗树进行<strong>深搜</strong>，<strong>叶节点的值也就是原本节点中对应的数；非叶节点的值，是根据自己的MAX/MIN属性，选择其子节点中最大/最小的数。</strong></p><p>通过过程图示会更好理解这个极大极小搜索：</p><p>这是一个已经搜索完成的搜索树，其中矩形节点表示MAX节点，椭圆形节点表示MIN节点。</p><p><img src="https://i.loli.net/2020/04/08/viwMdtOcmqruNnj.png" alt="image-20200408131047736.png"></p><p>搜索的过程可以表现为</p><p><img src="https://i.loli.net/2020/04/08/ovb3VkGd58PwrU7.png" alt="image.png"></p><h5 id="（二）α-β剪枝"><a href="#（二）α-β剪枝" class="headerlink" title="（二）α-β剪枝"></a>（二）α-β剪枝</h5><p>α-β剪枝是对极大极小搜索的优化，优化的效果十分明显。α-β剪枝分为α剪枝和β剪枝：</p><h6 id="1、α剪枝"><a href="#1、α剪枝" class="headerlink" title="1、α剪枝"></a>1、α剪枝</h6><p><strong>α剪枝是基于根节点为MAX节点，对第三层节点进行剪枝</strong>，α值保存了已被搜索的第二层节点中目前的最大值，即局部搜索最优结果。初始化α值为-∞，搜索时不断更新，当第二层某个节点的子节点评估值比α值小时，那么就没有必要对第二层的这个节点剩下的子节点进行搜索，因为搜索的结果无论如何不会超过当前的子节点评估值。</p><p><img src="https://i.loli.net/2020/04/08/PGKVAnJdBqDUIgM.png" alt="image.png"></p><h6 id="2、β剪枝"><a href="#2、β剪枝" class="headerlink" title="2、β剪枝"></a>2、β剪枝</h6><p><strong>β剪枝是基于根节点为MIN节点，对第三层节点进行剪枝</strong>，β值保存了已被搜索的第二层节点中目前的最小值，即局部搜索最差结果。初始化β值为+∞，搜索时不断更新，当第二层某个节点的子节点评估值比β值大时，那么就没有必要对第二层的这个节点剩下的子节点进行搜索，因为搜索的结果无论如何不会小于当前的子节点评估值。</p><p>需要注意的是，<strong>剪枝并不是只能发生在这样的只有三层的树中，实际上对于搜索树中每一个三层的子树都可以完成对第三层（其实也是对第二层）的剪枝</strong>。</p><h5 id="（三）剪枝的效率问题"><a href="#（三）剪枝的效率问题" class="headerlink" title="（三）剪枝的效率问题"></a>（三）剪枝的效率问题</h5><p>回到（一）中给定的搜索树，手动跑一遍α剪枝，可以发现根本就没有剪枝，这是为什么呢？剪枝是出现过的对根节点较优的值，对之后出现的不如该值优越的子节点的剪枝，所以<strong>将能产生较优结果的节点（或者说是着棋方式）放在前面，优先遍历，才能更好的对之后的节点进行剪枝。</strong></p><h4 id="四、未使用的方法"><a href="#四、未使用的方法" class="headerlink" title="四、未使用的方法"></a>四、未使用的方法</h4><h5 id="（一）同型表"><a href="#（一）同型表" class="headerlink" title="（一）同型表"></a>（一）同型表</h5><p>评估函数是对局面进行评估，落子的顺序对其并没有影响，搜索时，可能会产生已经搜索过的子节点，这时可以直接将该子节点连到当前父节点上。这个方法是搜索加速的一种方法。</p><h5 id="（二）开局库"><a href="#（二）开局库" class="headerlink" title="（二）开局库"></a>（二）开局库</h5><p>参考文献<a href="">[3]</a>中指出，在国际象棋、中国象棋、西洋跳棋中,其计算机程序几乎都采用了开局库。事实证明,开局库的存在大大提高了程序的对弈水平。然而不同的棋类中,开局库的重要程度也有所不同。在六子棋中,由于广泛地存在着决定胜负的迫着,所以开局很重要,因为开局时的“一着错”可能马上就导致了“满盘输”。文献中采用”枚举+迫着搜索“的方法，生成开局库。之后可能会添加这个方法，待续。</p><h5 id="（三）迭代加深搜索"><a href="#（三）迭代加深搜索" class="headerlink" title="（三）迭代加深搜索"></a>（三）迭代加深搜索</h5><p><del>这也是深搜的一种，与深搜的主要区别是</del></p><p>这个算法理解不够深，但使用它的原因是开局时棋子太少，没必要进行太深的搜索，所以先使用较浅的搜索，并且还可以对之后的搜索有”历史启发“。</p><h6 id="（四）双评价参数评估函数"><a href="#（四）双评价参数评估函数" class="headerlink" title="（四）双评价参数评估函数"></a>（四）双评价参数评估函数</h6><p>这个方法是<a href="">[2]</a>中提到的，除了上文中所说的评价函数之外，还引入一个阈值，用于区别当前的局面对对手更优，还是对自己更优，并且对手与自己的路的权值不同。局面对自己更优时，己方路的权值相对大一些；局面对地方更优时，对方路的权值相对大一些。</p><h4 id="五、优化"><a href="#五、优化" class="headerlink" title="五、优化"></a>五、优化</h4><p>添加的优化方式，是进行<strong>候选着棋点的排序，</strong>用以增强α-β剪枝的效率。</p><p>这一点很多论文中步骤都有，但没有找到特别详细的说明，编写代码的时候忽然想到将简单的连珠模式判断加入候选点的排序中，具体步骤如下：</p><p>（1）生成候选着棋点对序列；</p><p>（2）以着棋点为中心向两边扩展，并保存端点两侧交叉点颜色（对手颜色或者是空）；</p><p>（3）如为死棋（两侧都为对手颜色），直接继续遍历其他方向；之后将连珠大致分为活/眠2/3/4/5以及killer6，并赋予一定权重{1，2，3，4，5，6，7，8，9，10，100}；</p><p>（4）根据候选点周围连珠类型的加权和对候选点序列进行排序；</p><h4 id="六、参考文献"><a href="#六、参考文献" class="headerlink" title="六、参考文献"></a>六、参考文献</h4><p>[1]闵文杰. 六子棋计算机博弈关键技术研究[D].重庆交通大学,2010.</p><p>[2]齐祎霏. 六子棋中基于路的双评价参数评估函数的研究与应用[D].北京工业大学,2018.</p><p>[3]徐长明. 基于连珠模式的六子棋机器博弈关键技术研究[D].东北大学,2010.</p><p>[4]李学俊,王小龙,吴蕾,刘慧婷.六子棋中基于局部“路”扫描方式的博弈树生成算法[J].智能系统学报,2015,10(02):267-272.</p><p>如果使用连珠模式的机器博弈，那么阅读[3]即可，再辅助搜索相关概念，有时一些博客里的的讲解更加清晰，毕竟论文还是有很多复杂的证明……</p><p>如果使用路模式的机器博弈，可以先认真阅读[4]，这样对整体的方法会有一个了解；然后[2]引入了一些新的方法，用于优化系统；最后[1]和[3]都是非常详细的介绍了相关算法和一些启发式方法。</p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> basic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML初探笔记</title>
      <link href="/2020/03/05/HTMLfirstExploration/"/>
      <url>/2020/03/05/HTMLfirstExploration/</url>
      
        <content type="html"><![CDATA[<p>这篇文章不作为分享，只是我学习前端的笔记，摘抄网上关于HTML的教程。如想学习这方面的知识，十分不建议看这样的摘要式笔记！</p><h4 id="一、代码解读"><a href="#一、代码解读" class="headerlink" title="一、代码解读"></a>一、代码解读</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">style</span>=<span class="string">"background-color: PowderBlue"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span> 标题1 <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span> 标题2 <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span> 标题3 <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span> 标题4 <span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> 段落1 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> 段落            2 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 这是注释 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span> = <span class="string">"http://www.codebiluo.cn"</span>&gt;</span>a link <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span> = <span class="string">"https://ae01.alicdn.com/kf/Ueb18a569429c4c6eb8545b0f6f7fcbd5g.jpg"</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"200"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">15</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>4<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>5<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>6<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">1、&lt;html&gt; 与 &lt;&#x2F;html&gt; 之间的文本描述网页，定义了整个 HTML 文档。</span><br><span class="line"></span><br><span class="line">2、&lt;body&gt; 与 &lt;&#x2F;body&gt; 之间的文本是可见的页面内容。&lt;body bgcolor&#x3D;&quot;white&quot;&gt;中bgcolor属性更改了背景颜色。</span><br><span class="line"></span><br><span class="line">3、&lt;h1&gt; 与 &lt;&#x2F;h1&gt; 之间的文本被显示为标题，HTML 标题（Heading）是通过 &lt;h1&gt; - &lt;h6&gt; 等标签进行定义的。&lt;h1 align&#x3D;&quot;center&quot;&gt;中align属性使标题进行了居中排列。</span><br><span class="line">head的缩写</span><br><span class="line"></span><br><span class="line">4、&lt;p&gt; 与 &lt;&#x2F;p&gt; 之间的文本被显示为段落。</span><br><span class="line">paragraph的缩写</span><br><span class="line"></span><br><span class="line">5、HTML 链接是通过 &lt;a&gt; 标签进行定义的，在 href 属性中指定链接的地址。（在a link之前的空格都会被忽略）（这里的www.codebiluo.cn是不可访问的，他是以当前文本所在路径进行相对路径访问）</span><br><span class="line">anchor text的缩写，锚文本</span><br><span class="line"></span><br><span class="line">6、HTML 图像是通过 &lt;img&gt; 标签进行定义的，图像的名称和尺寸是以属性的形式提供的。</span><br><span class="line"></span><br><span class="line">7、&lt;br&gt;就是没有关闭标签的空元素（&lt;br&gt; 标签定义换行）。在开始标签中添加斜杠，比如 &lt;br &#x2F;&gt;，是关闭空元素的正确方法，HTML、XHTML 和 XML 都接受这种方式。</span><br><span class="line">即使&lt;br&gt;在所有浏览器中都是有效的，但使用&lt;br &#x2F;&gt;其实是更长远的保障。</span><br><span class="line">barter rabbet的缩写</span><br><span class="line"></span><br><span class="line">8、&lt;hr&#x2F;&gt;标签在 HTML 页面中创建水平线。</span><br><span class="line">horizontal rule的缩写</span><br><span class="line"></span><br><span class="line">9、&lt;!-- --&gt;用于添加注释。</span><br><span class="line"></span><br><span class="line">10、表格由 &lt;table&gt; 标签来定义。每个表格均有若干行（由 &lt;tr&gt; 标签定义），每行被分割为若干单元格（由 &lt;td&gt; 标签定义）。字母 td 指表格数据（table data），即数据单元格的内容。数据单元格可以包含文本、图片、列表、段落、表单、水平线、表格等等。表格的表头使用 &lt;th&gt; 标签进行定义。</span><br></pre></td></tr></table></figure><h4 id="二、HTML元素"><a href="#二、HTML元素" class="headerlink" title="二、HTML元素"></a>二、HTML元素</h4><p>HTML 元素指的是从开始标签（start tag）到结束标签（end tag）的所有代码。开始标签常被称为开放标签（opening tag），结束标签常称为闭合标签（closing tag）。</p><p><strong>元素语法</strong></p><ul><li><p>HTML 元素以<em>开始标签</em>起始</p></li><li><p>HTML 元素以<em>结束标签</em>终止</p><p><strong><em>（包括标签都是元素的一部分）</em></strong></p></li><li><p><em>元素的内容</em>是开始标签与结束标签之间的内容</p></li><li><p>某些 HTML 元素具有<em>空内容（empty content）</em>（在HTML元素中，没有内容的 HTML 元素被称为空元素。）</p></li><li><p>空元素<em>在开始标签中进行关闭</em>（以开始标签的结束而结束）</p></li><li><p>大多数 HTML 元素可拥有<em>属性</em></p></li></ul><p>大多数 HTML 元素可以嵌套（可以包含其他 HTML 元素）。</p><h4 id="三、HTML-属性"><a href="#三、HTML-属性" class="headerlink" title="三、HTML 属性"></a>三、HTML 属性</h4><p>HTML 标签可以拥有<em>属性</em>。属性提供了有关 HTML 元素的<em>更多的信息</em>。</p><p>属性总是以<strong>名称/值对</strong>的形式出现，比如：<em>name=”value”</em>。</p><p>属性总是在 HTML 元素的<em>开始标签</em>中规定。</p><ul><li><p>属性值应该始终被包括在引号内。双引号是最常用的，不过使用单引号也没有问题。在某些个别的情况下，比如属性值本身就含有双引号，那么您必须使用单引号，例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name='Bill "HelloWorld" Gates'</span><br></pre></td></tr></table></figure><p><strong>全局属性，可用于所有的HTML 元素！！</strong></p></li></ul><table><thead><tr><th align="left">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.w3school.com.cn/tags/att_standard_accesskey.asp" target="_blank" rel="noopener">accesskey</a></td><td align="left">规定激活元素的快捷键。用Alt+“ ”来快捷访问。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/tags/att_standard_class.asp" target="_blank" rel="noopener">class</a></td><td align="left">规定元素的一个或多个类名（引用样式表中的类）。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/tags/att_global_contenteditable.asp" target="_blank" rel="noopener">contenteditable</a></td><td align="left">规定元素内容是否可编辑。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/tags/att_global_contextmenu.asp" target="_blank" rel="noopener">contextmenu</a></td><td align="left">规定元素的上下文菜单。上下文菜单在用户点击元素时显示。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/tags/att_global_data.asp" target="_blank" rel="noopener">data-*</a></td><td align="left">用于存储页面或应用程序的私有定制数据。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/tags/att_standard_dir.asp" target="_blank" rel="noopener">dir</a></td><td align="left">规定元素中内容的文本方向。rtl：文本从左往右；ltr：文本从右往左。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/tags/att_global_draggable.asp" target="_blank" rel="noopener">draggable</a></td><td align="left">规定元素是否可拖动。链接和图像默认是可拖动的。draggable 属性常用在拖放操作中。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/tags/att_global_dropzone.asp" target="_blank" rel="noopener">dropzone</a></td><td align="left">规定在拖动被拖动数据时是否进行复制、移动或链接。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/tags/att_global_hidden.asp" target="_blank" rel="noopener">hidden</a></td><td align="left">规定元素仍未或不再相关。hidden 属性也可用于防止用户查看元素，直到匹配某些条件（比如选择了某个复选框）。然后，JavaScript 可以删除 hidden 属性，以使此元素可见。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/tags/att_standard_id.asp" target="_blank" rel="noopener">id</a></td><td align="left">规定元素的<strong>唯一</strong> id。id 属性可用作链接锚（link anchor），通过 JavaScript（HTML DOM）或通过 CSS 为带有指定 id 的元素改变或添加样式。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/tags/att_standard_lang.asp" target="_blank" rel="noopener">lang</a></td><td align="left">规定元素内容的语言。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/tags/att_global_spellcheck.asp" target="_blank" rel="noopener">spellcheck</a></td><td align="left">规定是否对元素进行拼写和语法检查。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/tags/att_standard_style.asp" target="_blank" rel="noopener">style</a></td><td align="left">规定元素的行内 CSS 样式。style 属性规定元素的行内样式（inline style）。style 属性将覆盖任何全局的样式设定，例如在style标签或在外部样式表中规定的样式。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/tags/att_standard_tabindex.asp" target="_blank" rel="noopener">tabindex</a></td><td align="left">规定元素的 tab 键次序。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/tags/att_standard_title.asp" target="_blank" rel="noopener">title</a></td><td align="left">规定有关元素的额外信息。这些信息通常会在鼠标移到元素上时显示一段工具<strong>提示文本</strong>（tooltip text）。title 属性常与 form 以及 a 元素一同使用，以提供关于输入格式和链接目标的信息。同时它也是 abbr 和 acronym 元素的必需属性。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/tags/att_global_translate.asp" target="_blank" rel="noopener">translate</a></td><td align="left">规定是否应该翻译元素内容。</td></tr></tbody></table><h4 id="四、HTML-标题"><a href="#四、HTML-标题" class="headerlink" title="四、HTML 标题"></a>四、HTML 标题</h4><p>浏览器会自动地在标题的前后添加空行。</p><p>默认情况下，HTML 会自动地在块级元素前后添加一个额外的空行，比如段落、标题元素前后。</p><p>用&lt;hr/&gt; 标签在 HTML 页面中创建水平线。（<strong>注意这里标签需要闭合，中间不能有空格</strong>）（好像看到这东西不建议使用，但想想也确实，一个网页中那么多需要有那么多需要考虑格式的地方，如果单纯的只用这些标签来完成，是不现实的,<strong>实际上是用级联样式表CSS完成的</strong>）（<strong>随便打开一个网页，里面根本没使用 &lt;hr&gt; &lt;br&gt;这样的标签，注释的方式倒是很多</strong>）</p><h4 id="五、HTML-段落"><a href="#五、HTML-段落" class="headerlink" title="五、HTML 段落"></a>五、HTML 段落</h4><p>浏览器会自动地在段落的前后添加空行。虽然闭合标签不加浏览器也能识别，但还是一定要注意添加。</p><p>如果您希望在不产生一个新段落的情况下进行换行（新行），可以使用 &lt;br&gt;标签：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>This is<span class="tag">&lt;<span class="name">br</span> /&gt;</span>a para<span class="tag">&lt;<span class="name">br</span> /&gt;</span>graph with line breaks<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>额外空行/空格会被处理为一个空格！</strong></p><p>对于 HTML，您无法通过在 HTML 代码中添加额外的空格或换行来改变输出的效果。</p><p>当显示页面时，浏览器会移除<em>源代码中</em>多余的空格和空行。所有连续的空格或空行都会被算作一个空格。需要注意的是，HTML 代码中的所有连续的空行（换行）也被显示为一个空格。（包括段落里的内容）<strong>这时可以使用 pre 预格式文本，这样可以保留空格和换行。</strong></p><h4 id="六、HTML-样式"><a href="#六、HTML-样式" class="headerlink" title="六、HTML 样式"></a>六、HTML 样式</h4><p><strong>这个应该才是html中调整布局、形状 、颜色的属性，之前Django中的静态文件中经常见到这个</strong></p><ul><li><p>style 属性的作用：<strong>提供了一种改变所有 HTML 元素的样式的通用方法。</strong></p></li><li><p>样式是 HTML 4 引入的，它是一种新的首选的改变 HTML 元素样式的方式。通过 HTML 样式，能够通过使用 style 属性直接将样式添加到 HTML 元素，或者间接地在独立的样式表中（CSS 文件）进行定义。</p></li><li><p><strong>应该避免使用下面这些标签和属性：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span>：定义居中的内容。</span><br><span class="line"><span class="tag">&lt;<span class="name">font</span>&gt;</span>和<span class="tag">&lt;<span class="name">basefont</span>&gt;</span>：定义HTML字体。</span><br><span class="line"><span class="tag">&lt;<span class="name">s</span>&gt;</span>和<span class="tag">&lt;<span class="name">strike</span>&gt;</span>：定义删除线文本</span><br><span class="line"><span class="tag">&lt;<span class="name">u</span>&gt;</span>：定义下划线文本</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">align</td><td align="left">定义文本的对齐方式</td></tr><tr><td align="left">bgcolor</td><td align="left">定义背景颜色</td></tr><tr><td align="left">color</td><td align="left">定义文本颜色</td></tr></tbody></table></li></ul><p><strong>为什么 &lt;hrml&gt;会有一部风标签被废除?<br>因为html只有一个作用,就是用来添加语义的,早期一些html标签是没有语义的,是用来修改样式的,所以这部分标签就被淘汰了</strong></p><p><strong>样式实例：</strong></p><table><thead><tr><th>功能</th><th>属性</th></tr></thead><tbody><tr><td>背景颜色</td><td>background-color</td></tr><tr><td>字体</td><td>front-family</td></tr><tr><td>文本颜色</td><td>color</td></tr><tr><td>文本尺寸</td><td>font-size</td></tr><tr><td>文本对齐</td><td>text-align</td></tr></tbody></table><p><strong>！！！请记住这些物理样式标签对紧接的文本产生的强烈效果。要实现在整个文档范围内对文本显示的全面控制，请使用样式表。</strong></p><h4 id="七、HTML-文本格式化"><a href="#七、HTML-文本格式化" class="headerlink" title="七、HTML 文本格式化"></a>七、HTML 文本格式化</h4><h5 id="（1）文本格式化标签"><a href="#（1）文本格式化标签" class="headerlink" title="（1）文本格式化标签"></a>（1）文本格式化标签</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">标签描述</span><br><span class="line">&lt;b&gt;定义粗体文本。</span><br><span class="line">&lt;big&gt;定义大号字。</span><br><span class="line">&lt;em&gt;定义着重文字。</span><br><span class="line">&lt;i&gt;定义斜体字。</span><br><span class="line">&lt;small&gt;定义小号字。</span><br><span class="line">&lt;strong&gt;定义加重语气。</span><br><span class="line">&lt;sub&gt;定义下标字。</span><br><span class="line">&lt;sup&gt;定义上标字。</span><br><span class="line">&lt;ins&gt;定义插入字。</span><br><span class="line">&lt;del&gt;定义删除字。</span><br><span class="line">&lt;s&gt;不赞成使用。使用 &lt;del&gt; 代替。</span><br><span class="line">&lt;strike&gt;不赞成使用。使用 &lt;del&gt; 代替。</span><br><span class="line">&lt;u&gt;不赞成使用。使用样式（style）代替。</span><br></pre></td></tr></table></figure><h5 id="（2）“计算机输出”标签"><a href="#（2）“计算机输出”标签" class="headerlink" title="（2）“计算机输出”标签"></a>（2）“计算机输出”标签</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">标签描述</span><br><span class="line">&lt;code&gt;定义计算机代码。&lt;code&gt;元素不保留多余的空格和折行。如需保留则用&lt;pre&gt;包围代码。</span><br><span class="line">&lt;kbd&gt;定义键盘码。</span><br><span class="line">&lt;samp&gt;定义计算机代码样本。</span><br><span class="line">&lt;tt&gt;定义打字机代码。</span><br><span class="line">&lt;var&gt;定义变量。</span><br><span class="line">&lt;pre&gt;定义预格式文本。</span><br><span class="line">&lt;listing&gt;不赞成使用。使用 &lt;pre&gt; 代替。</span><br><span class="line">&lt;plaintext&gt;不赞成使用。使用 &lt;pre&gt; 代替。</span><br><span class="line">&lt;xmp&gt;不赞成使用。使用 &lt;pre&gt; 代替。</span><br></pre></td></tr></table></figure><h5 id="（3）引用、引用和术语定义"><a href="#（3）引用、引用和术语定义" class="headerlink" title="（3）引用、引用和术语定义"></a>（3）引用、引用和术语定义</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">标签描述</span><br><span class="line">&lt;abbr&gt;定义缩写。（鼠标放在指定词上后，显示其他内容，这个内容是用title属性定义在   abbr中）显示为带下划线的字符串。</span><br><span class="line">&lt;acronym&gt;定义首字母缩写。</span><br><span class="line">&lt;address&gt;定义地址。</span><br><span class="line">&lt;bdo&gt;定义文字方向。</span><br><span class="line">&lt;blockquote&gt;定义长的引用。（进行缩进处理）</span><br><span class="line">&lt;q&gt;定义短的引用语。</span><br><span class="line">&lt;cite&gt;定义引用、引证。</span><br><span class="line">&lt;dfn&gt;定义一个定义项目。显示为斜体字，并且可以和abbr形成嵌套结构。</span><br></pre></td></tr></table></figure><p><strong>对缩写进行标记能够为浏览器、翻译系统以及搜索引擎提供有用的信息。</strong></p><h4 id="八、HTML-CSS"><a href="#八、HTML-CSS" class="headerlink" title="八、HTML CSS"></a>八、HTML CSS</h4><h5 id="（1）外部样式表"><a href="#（1）外部样式表" class="headerlink" title="（1）外部样式表"></a>（1）外部样式表</h5><p>当样式需要被应用到很多页面的时候，外部样式表将是理想的选择。使用外部样式表，你就可以通过更改一个文件来改变整个站点的外观。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"mystyle.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="（2）内部样式表"><a href="#（2）内部样式表" class="headerlink" title="（2）内部样式表"></a>（2）内部样式表</h5><p>当单个文件需要特别样式时，就可以使用内部样式表。你可以在 head 部分通过 <style> 标签定义内部样式表。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-tag">body</span> &#123;<span class="attribute">background-color</span>: red&#125;</span></span><br><span class="line"><span class="css"><span class="selector-tag">p</span> &#123;<span class="attribute">margin-left</span>: <span class="number">20px</span>&#125;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="（3）内联样式"><a href="#（3）内联样式" class="headerlink" title="（3）内联样式"></a>（3）内联样式</h5><p>当特殊的样式需要应用到个别元素时，就可以使用内联样式。 使用内联样式的方法是在相关的标签中使用样式属性。样式属性可以包含任何 CSS 属性。以下实例显示出如何改变段落的颜色和左外边距。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"color: red; margin-left: 20px"</span>&gt;</span></span><br><span class="line">This is a paragraph</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">标签描述</span><br><span class="line">&lt;style&gt;定义样式定义。</span><br><span class="line">&lt;link&gt;定义资源引用。</span><br><span class="line">&lt;div&gt;定义文档中的节或区域（块级）。</span><br><span class="line">&lt;span&gt;定义文档中的行内的小块或区域。</span><br></pre></td></tr></table></figure><h4 id="九、HTML-链接"><a href="#九、HTML-链接" class="headerlink" title="九、HTML 链接"></a>九、HTML 链接</h4><p>有两种使用 &lt;a&gt; 标签的方式：</p><ol><li>通过使用 href 属性 - 创建指向另一个文档的链接（hrfe是Hypertext Reference的缩写）</li><li>通过使用 name 属性 - 创建文档内的书签 </li></ol><ul><li><p><strong>“链接文本” 不必一定是文本。图片或其他 HTML 元素都可以成为链接。</strong></p></li><li><p>使用 Target 属性，你可以定义被链接的文档在何处显示。</p><p>下面的这行会在新窗口打开文档：</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.w3school.com.cn/"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>Visit W3School!<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以使用 name 属性创建 HTML 页面中的书签。<strong>书签不会以任何特殊方式显示，它对读者是不可见的。</strong>当使用命名锚（named anchors）时，我们可以创建直接跳至该命名锚（比如页面中某个小节）的链接，跳转还是使用 &lt;a&gt; 标签的 href 属性，在锚名称之前加#即可。eg：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">"tips"</span>&gt;</span>基本的注意事项 - 有用的提示<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#tips"</span>&gt;</span>有用的提示<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>有用的提示就会跳转到name对应位置。</p><ul><li>假如浏览器找不到已定义的命名锚，那么就会定位到文档的顶端。不会有错误发生。</li><li><strong>请始终将正斜杠添加到子文件夹。</strong>假如这样书写链接：href=”<a href="http://www.w3school.com.cn/html&quot;，就会向服务器产生两次" target="_blank" rel="noopener">http://www.w3school.com.cn/html&quot;，就会向服务器产生两次</a> HTTP 请求。这是因为服务器会添加正斜杠到这个地址，然后创建一个新的请求，就像这样：href=”<a href="http://www.w3school.com.cn/html/&quot;。为了效率考虑。" target="_blank" rel="noopener">http://www.w3school.com.cn/html/&quot;。为了效率考虑。</a></li><li>创建邮件链接或者其他需要中间加空格的地方，应该使用 %20 来替换单词之间的空格，这样浏览器就可以正确地显示文本了。</li></ul><h4 id="十、HTML-图像"><a href="#十、HTML-图像" class="headerlink" title="十、HTML 图像"></a>十、HTML 图像</h4><p>&lt;img&gt; 标签是空标签，<strong>它只包含属性，并且没有闭合标签。</strong>用源属性src来显示图像：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"url"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>使用alt属性可以进行文本替换（当浏览器不能载入图片，那么就会使用这段替换文本）</p><p>&lt;area&gt; 这个标签可以说很有意思，可以实现点击图片完成一定的交互，内容比较多，但是这个标签感觉可以展开很多，并且能够完成很多有趣的事情。</p><ul><li><h5 id="area-标签"><a href="#area-标签" class="headerlink" title="area 标签"></a>area 标签</h5></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://upload-images.jianshu.io/upload_images/5547112-914acbfbc1ddbb76.jpg?imageMogr2/auto-orient/strip|imageView2/2/w/896/format/webp"</span></span></span><br><span class="line"><span class="tag"><span class="attr">alt</span>=<span class="string">"supergitman"</span> <span class="attr">usemap</span>=<span class="string">"#supergitman"</span> <span class="attr">width</span>=<span class="string">200</span> <span class="attr">height</span>=<span class="string">200</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">map</span> <span class="attr">name</span>=<span class="string">"supergitman"</span> <span class="attr">id</span>=<span class="string">"supergitman"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">area</span> </span></span><br><span class="line"><span class="tag"><span class="attr">shape</span>=<span class="string">"circle"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">coords</span>=<span class="string">"100,100,30"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">href</span>=<span class="string">"https://www.codebiluo.cn"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">target</span> =<span class="string">"_blank"</span></span></span><br><span class="line"><span class="tag"><span class="attr">alt</span>=<span class="string">"homeSite"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&lt;area&gt; 标签定义图像映射中的区域（注：图像映射指得是带有可点击区域的图像）。**area 元素总是嵌套在 &lt;map&gt; 标签之中。</p><p>可选的属性：</p><table><thead><tr><th align="left">属性</th><th align="left">值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.w3school.com.cn/tags/att_area_coords.asp" target="_blank" rel="noopener">coords</a></td><td align="left">坐标值</td><td align="left">定义可点击区域（对鼠标敏感的区域）的坐标。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/tags/att_area_href.asp" target="_blank" rel="noopener">href</a></td><td align="left"><em>URL</em></td><td align="left">定义此区域的目标 URL。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/tags/att_area_nohref.asp" target="_blank" rel="noopener">nohref</a></td><td align="left">nohref</td><td align="left">从图像映射排除某个区域。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/tags/att_area_shape.asp" target="_blank" rel="noopener">shape</a></td><td align="left">default、rect、circ、poly</td><td align="left">定义区域的形状。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/tags/att_area_target.asp" target="_blank" rel="noopener">target</a></td><td align="left">_blank _parent _self _top</td><td align="left">规定在何处打开 href 属性指定的目标 URL。</td></tr></tbody></table><p><strong>shape属性与coords属性：</strong></p><table><thead><tr><th align="left">值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><em>x1,y1,x2,y2</em></td><td align="left">如果 shape 属性设置为 “rect”，则该值规定矩形左上角和右下角的坐标。</td></tr><tr><td align="left"><em>x,y,radius</em></td><td align="left">如果 shape 属性设置为 “circ”，则该值规定圆心的坐标和半径。</td></tr><tr><td align="left"><em>x1,y1,x2,y2,..,xn,yn</em></td><td align="left"><strong>如果 shape 属性设置为 “poly”，则该值规定多边形各边的坐标。如果第一个坐标和最后一个坐标不一致，那么为了关闭多边形，浏览器必须添加最后一对坐标。</strong></td></tr></tbody></table><p><strong>注意：</strong></p><p>1、如果某个 &lt;area&gt; 标签中的坐标和其他区域发生了重叠，会优先采用最先出现的 area 标签。浏览器会忽略超过图像边界范围之外的坐标。</p><p>2、在 HTML 中，&lt;area&gt; 没有结束标签。在 XHTML 中，&lt;area&gt; 必须正确地关闭。</p><p>3、<strong>&lt;img&gt; 中的 usemap 属性可引用 &lt;map&gt; 中的 id 或 name 属性（由浏览器决定），所以我们需要同时向 &lt;map&gt; 添加 id 和 name 两个属性。</strong></p><h4 id="十一、HTML表格"><a href="#十一、HTML表格" class="headerlink" title="十一、HTML表格"></a>十一、HTML表格</h4><ul><li><p>表格由 &lt;table&gt; 标签来定义。每个表格均有若干行（由 &lt;tr&gt; 标签定义），每行被分割为若干单元格（由 &lt;td&gt; 标签定义）。 td 指表格数据（table data），即数据单元格的内容。数据单元格可以包含文本、图片、列表、段落、表单、水平线、表格等等。</p></li><li><p>表格的表头使用 &lt;th&gt; 标签进行定义。</p></li><li><p>一个格子里没有内容，如果直接不加东西或者填几个空格，那么这个格子的边框也不会显示。这时可以使用空格占位符&amp;nbsp（后面再加个;）。</p></li></ul><p><strong>在html代码中&amp;nbsp和空格的区别：</strong></p><blockquote><p>在html代码中每输入一个转义字符&amp;nbsp就表示一个空格，输入十个&amp;nbsp，页面中就显示10个空格位置。</p><p>而在html代码中输入空格，不管输入多少个空格，最终在页面中显示的空格位置只有一个。</p><p>例如：hmtl代码中，在两个字之间输入十个空格与输入十个转义字符&amp;nbsp的效果对比。</p></blockquote><p>是<strong><em>Non-Breaking Space</em></strong>的缩写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">表格描述</span><br><span class="line">&lt;table&gt;定义表格</span><br><span class="line">&lt;caption&gt;定义表格标题。caption 标签必须紧随 table 标签之后。您只能对每个表格定义一个标题。通常这个标题会被居中于表格之上。</span><br><span class="line">&lt;th&gt;定义表格的表头。</span><br><span class="line">&lt;tr&gt;定义表格的行。</span><br><span class="line">&lt;td&gt;定义表格单元。</span><br><span class="line">&lt;thead&gt;定义表格的页眉。</span><br><span class="line">&lt;tbody&gt;定义表格的主体。</span><br><span class="line">&lt;tfoot&gt;定义表格的页脚。</span><br><span class="line">&lt;col&gt;定义用于表格列的属性。</span><br><span class="line">&lt;colgroup&gt;定义表格列的组。</span><br></pre></td></tr></table></figure><h4 id="十二、HTML-列表"><a href="#十二、HTML-列表" class="headerlink" title="十二、HTML 列表"></a>十二、HTML 列表</h4><h5 id="（1）-无序列表"><a href="#（1）-无序列表" class="headerlink" title="（1） 无序列表"></a>（1） 无序列表</h5><p>无序列表是一个项目的列表，此列项目使用粗体圆点（典型的小黑圆圈）进行标记。</p><blockquote><p>无序列表始于 &lt;ul&gt; 标签。每个列表项始于 &lt;li&gt;。</p></blockquote><h5 id="（2）有序列表"><a href="#（2）有序列表" class="headerlink" title="（2）有序列表"></a>（2）有序列表</h5><p>同样，有序列表也是一列项目，列表项目使用数字进行标记。</p><blockquote><p>有序列表始于 &lt;ol&gt; 标签。每个列表项始于 &lt;li&gt; 标签。</p></blockquote><ul><li>ul是unordered lists的缩写，ol是ordered lists的缩写，li是list item的缩写。</li><li>ul中可以用type属性来指定列表开头样式</li></ul><h4 id="十三、HTML-块"><a href="#十三、HTML-块" class="headerlink" title="十三、HTML 块"></a>十三、HTML 块</h4><p>大多数 HTML 元素被定义为块级元素或内联元素。</p><p>“块级元素”译为 block level element，“内联元素”译为 inline element。</p><p><strong>块级元素在浏览器显示时，通常会以新行来开始（和结束）。内联元素在显示时通常不会以新行开始。</strong></p><h5 id="（1）-lt-div-gt-元素"><a href="#（1）-lt-div-gt-元素" class="headerlink" title="（1）&lt;div&gt; 元素"></a>（1）&lt;div&gt; 元素</h5><p>HTML &lt;div&gt; 元素是块级元素，它是可用于组合其他 HTML 元素的容器。</p><div> 元素没有特定的含义。除此之外，由于它属于块级元素，浏览器会在其前后显示折行。<p><strong>如果与 CSS 一同使用，div 元素可用于对大的内容块设置样式属性。</strong></p><p> &lt;div&gt; 元素的另一个常见的用途是文档布局。它取代了使用表格定义布局的老式方法。使用 table 元素进行文档布局不是表格的正确用法。table 元素的作用是显示表格化的数据。</p><p><strong>如果用 id 或 class 来标记 <div>，那么该标签的作用会变得更加有效。</strong></p><h5 id="（2）-lt-span-gt-元素"><a href="#（2）-lt-span-gt-元素" class="headerlink" title="（2）&lt;span&gt; 元素"></a>（2）&lt;span&gt; 元素</h5><p>HTML &lt;span&gt; 元素是内联元素，可用作文本的容器。</p><p>&lt;span&gt; 元素也没有特定的含义。</p><p><strong>当与 CSS 一同使用时，&lt;span&gt; 元素可用于为部分文本设置样式属性。</strong></p><p>可以对同一个 &lt;span&gt; 元素应用 class 或 id 属性，但是更常见的情况是只应用其中一种。这两者的主要差异是，<strong>class 用于元素组（类似的元素，或者可以理解为某一类元素），而 id 用于标识单独的唯一的元素。</strong></p><ul><li>这两个标签与 CSS 一起一起使用总是会见到。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> basic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Auto Minesweeper</title>
      <link href="/2020/02/28/minesweeper/"/>
      <url>/2020/02/28/minesweeper/</url>
      
        <content type="html"><![CDATA[<p>数据结构课设要求完成<strong>扫雷游戏的自动扫雷功能</strong>。问题是从游戏中来，使用的方法自然也就是我在玩游戏时的思路。思路其实很简单，阅读下文中的引用就能理解。如果是想体验一下整个思考的过程，阅读下文中<strong><em>加粗斜体</em></strong>部分或许能给你一些启发。</p><h4 id="一、心路历程"><a href="#一、心路历程" class="headerlink" title="一、心路历程"></a>一、心路历程</h4><p>首先给出我在思考这个问题后列出的大概提纲，也就是代码中需要做什么事情（只是大纲，所以写的有些不通顺，但是如果get到这个点，就没必要看下面的具体思路了😂）</p><blockquote><p>首先找可以确定的地雷的位置，生成一个数组<br>然后找周围地雷数等于这个节点值的位置，将它周围没有点的位置加入到一个数组中，这个数组中的点就是一定可以点的位置</p></blockquote><p>是的，非常简短的思路，有了这个大致思路，问题也就很明了。</p><hr><p>上面的是最开始的心路历程，两周过去，发生了很多事情。现在对这道题又有了更深入的认识：</p><p>上面的方法，是从那个方块<strong>一定</strong>有地雷的角度去思考，正常人解决扫雷问题也是以这个方法来进行，最终可以在20<em>20，50个地雷的棋盘中，达到50%左右的胜率。但是还是有可能出现*</em>没有可确定的地雷<strong>、</strong>没有可以得到的可选点**。遇到这两种情况直接随机即可，但是实际上还是有一些决策的余地的。先给出决策的提纲，具体为什么做在之后的后期优化讲解：</p><blockquote><p>① 没有可以确定的地雷时，优先选择四个角，四条边上的未点方块；</p><p>② 没有可选点时，比较每个未点方块爆雷的概率，</p></blockquote><h4 id="二、具体思路"><a href="#二、具体思路" class="headerlink" title="二、具体思路"></a>二、具体思路</h4><h5 id="（一）确定地雷位置"><a href="#（一）确定地雷位置" class="headerlink" title="（一）确定地雷位置"></a>（一）确定地雷位置</h5><p>首先明确我们现在有什么，根据最后封装的函数：</p><p><code>void machine(int GamePanel[30][30], int n, int m, int &amp;x, int &amp;y);</code></p><p>我们现在有的是一个棋盘GamePanel，知道已经点开的方块，以及该店周围的地雷数量；以及未点开的方块，用-1来表示。</p><p><strong><em>地雷的位置是根据已经点开的点所确定</em></strong>。在这里可以先不看下面的内容，根据这个提示想想如何确定地雷位置。</p><blockquote><p>遍历棋盘中已经点开的方块p，统计方块p周围没有点开的方块的数量，如果为点开的方块数量等于方块p周围的地雷数量k，那么就说明这些未点开的方块都是地雷。</p></blockquote><p>这时所得到的地雷都是显式的，我们在游戏中就能够一眼看出来的地雷，这时无法确定的地雷，之后有可能根据之后点出的点然后找出来，但也<strong>有可能根本无法确定</strong>，对于无法寻找地雷的探讨放在最后的结果分析。</p><h5 id="（二）确定可选点位置"><a href="#（二）确定可选点位置" class="headerlink" title="（二）确定可选点位置"></a>（二）确定可选点位置</h5><p>现在知道了一些地雷的位置，接下来就是根据这些地雷，找出那些点是下一个可选点。</p><p><strong><em>思路和确定地雷位置相同，根据已知地雷位置来去确定可选点位置</em></strong>。还是根据提示想想如何实现。</p><blockquote><p>遍历棋盘中已经点开的方块P，统计方块P周围没有点开的方块数x，以及方块p周围确定的地雷数y。如果未点开的方块数x大于方块P周围已经确定的地雷数y，那么就说明方块P周围得方块，除去周围的地雷，剩下的都是可选点。</p></blockquote><p>这时确定的可选点不止一个，之后需要选择其中的一个点作为返回值。个人认为在选择可选点的时候，除了直接随机一个可选点之外，可以思考一种选择的策略，这个可能是后期优化的一个点吧。</p><h5 id="（三）后期优化"><a href="#（三）后期优化" class="headerlink" title="（三）后期优化"></a>（三）后期优化</h5><p>这里大致给出几个我认为可能会对胜率以及步数有提升的点：</p><p>1、上文中提到的选择可选点时的优化，除了直接随机一个可选点之外，<del>可以思考一种选择的策略</del>，<strong>现在已经已经有策略咯！！！！！</strong>；</p><p>2、后文胜率分析中会有对于扫雷失败的分析，通过分析我们可以看到，最终剩下的未点方块和地雷数都是很少的，瀚汶带佬提出的分析特定的方块组合范式（相邻几个方块以一种规律排列，比如比如 1 2 1 、3 3 3 、4 3），根据分析可以得到地雷的位置。<strong>但是</strong>，这种分析并不是万能的，<strong>有些范式会对应多解</strong>，具体内容下文讨论。</p><p>3、没有确定地雷，或者是没有可选点怎么办。最开始的时候，我是直接选择了最左上角的方块，此时我统计出的步数平均值稳定在92步左右，后来将他改成从未选点中随机一个方块，这时步数平均值稳定在89步左右（提升或许有些小）</p><p>……（希望有缘人还能找到更多优化的方法）</p><h4 id="三、结果分析"><a href="#三、结果分析" class="headerlink" title="三、结果分析"></a>三、结果分析</h4><p>测试使用的是要求的20*20棋盘，50颗地雷。</p><p>首先给出进行10000次自动扫雷的统计结果：</p><p><img src="https://i.loli.net/2020/02/28/m3DspwMqEoQy7jU.png" alt="gaitubao_VmEf1Ts97xjJrhQ.png"></p><p>从数据中可以看到，<strong>第一步就爆雷的比例非常大</strong>（按匿名同学所说，就是50/400=12.5%左右），这是因为第一步你没有任何点开的方块，算法的决策没有依据，只能随机一个可选点。这个随机出的点完全取决于个人的脸黑程度，与算法的效率无关，故我在统计胜率时将这部分失败的样本舍去。</p><p><strong>首先分析为什么会输。</strong>在得出大概思路的时候，我认为优化的方向应该只是如何让赢的步数降低，但是没想到，每一次测试，会有那么多扫雷失败的情况。这时我就想到了自己在游戏时找不到地雷只能蒙的场景：或许这个就是为什么胜率如此低的原因。给出一个例子勾起大家的回忆（例子仍从匿名群友处获得）：</p><p><img src="https://i.loli.net/2020/02/28/AaIoSN3puQ6Pc8i.png" alt="gaitubao_GJZ8FDTMNgcqUSH _1_.png"></p><p>此时还有三部分没有解决，右下角根据交涉某个位置有地雷来分析出地雷的位置如下：</p><p><img src="https://i.loli.net/2020/02/28/gw6Z2mLSlrtFQIe.jpg" alt="gaitubao_4164F094C69CAE5328ADA9F3202FC398 - 副本.png"></p><p>左边和右上角的部分是死局，无法解决，我们来分析这两个部分是如何导致死局的。这两部分都是由左右两个方块组成的，同时看到，当前还有6个雷没有找出，问题就出在左右两个方块无论假设哪一个是地雷都能使局面成立。这就是不唯一解的由来。</p><p><strong>接下来分析胜局的步数情况</strong>。统计步数后，转换为统计图：</p><p><img src="https://i.loli.net/2020/02/28/QbjyuEUgoRc7nVN.png" alt="gaitubao_apLIi4EhGUBlC21 _1_.png"></p><p><em>横坐标为胜局步数，纵坐标为此步数胜局数。</em>非常明显，这是一个高斯分布，最终进行测试的时候，大家的统计情况也就是这样，所以最终成绩的分布自然也是符合高斯分布。</p><p>这个问题也就解决了，之后如还有优化还会继续添加，如果有还得优化方案也欢迎大家联系我！</p><h4 id="四、后期优化"><a href="#四、后期优化" class="headerlink" title="四、后期优化"></a>四、后期优化</h4><p><del>完成machine函数之后，为了模拟老师最终测试的形式，编写了一份<strong>模拟1000次老师测试</strong>（每一次随机十个棋盘进行自动游戏），最后，满分的比例稳定在<strong>71%</strong>。作为最后的结果，明显是不够好的。之后的几天总会思考优化的问题，就如我之前所说的优化方法，我尝试从这些方向找到可行的办法，其中1和3是针对于步数的优化， 2是针对于胜率的优化，并且3已经实现。所以最后剩下对步数的优化只有方法1，并且我得到了一种确实可行的优化方法：<strong>原本程序中确定可选点，是从可选点数组中随机挑选一个。但是在实际的游戏中，在选取可选点的时候，我们总会趋向于选择周围有更多未点开的方块的可选点，因为如果点下这样的方块很有可能会扩展出很多的方块，也就是有可能增加了更多的点开方块。相比于将边界方块（周围地雷数大于0的方块）一个一个点开，点开一个内部周围地雷数为0的方块，总会是更优的选择。这也就是我们新的可选点决策方案。</strong></del></p><p><del>具体的实施方案是，判断每个可选点周围未点开的方块个数，将未点开方块个数最多的可选点作为最终的决策方块。</del></p><p><del>这样一来，平均步数稳定在<strong>83步</strong>，测试得到满分的比例稳定在<strong>86%</strong>，提升了15%，可以说是很大的提升了！</del></p><p>老师用了新的测评方法，根据最终的测评方案给出优化方案。</p><p>新的测评方案很公平，随机测试1000局游戏，计算平均成绩和胜率。使用原本的暴力算法，<strong>最终平均分为55分，胜率为51%</strong>。可以说是很不好，现在回头看，也觉得自己之后不好好优化滑水是真的🐕。</p><p>使用各种优化方法之后，<strong>最终平均分（原始平均分）达到63分，胜率为71%</strong>。下面分条叙述优化的方法：</p><p><strong>①、挑选最终返回的可选点。</strong>原本程序中确定可选点，是从可选点数组中随机挑选一个。但是在实际的游戏中，在选取可选点的时候，我们总会趋向于选择周围有更多未点开的方块的可选点，因为如果点下这样的方块很有可能会扩展出很多的方块，也就是有可能增加了更多的点开方块。相比于将边界方块（周围地雷数大于0的方块）一个一个点开，点开一个内部周围地雷数为0的方块，总会是更优的选择。</p><p><strong>②、没有确定的地雷时直接四个角与四周的地雷优先。</strong>开局的时候，已点方块是很稀疏的，无法找到确定的地雷。棋盘中每个方块爆雷的概率都是相同的的，所以这时要考虑点开某个方块对之后的棋局的有利程度。四个角上的方块，周围地雷数有1，2，3三种可能，只有1/3的可能，方块周围地雷数为3时，下一次才一定会找到确定地雷。而棋盘中的大部分方块，周围地雷数有8种可能，只有1/8的下一次才一定会找到确定地雷。选择四周的方块也可以根据这个方法思考其对之后有利程度进行选择。</p><p><strong>③、没有可选点时，计算每个方块爆雷的概率，选择爆雷概率最小的方块。</strong>将没有点的方块分为两类，一类是周围没有已点方块，一类是周围有已点方块。前者爆雷的概率是<strong>没有找到的地雷数除以没有点开的方块数</strong>。后者爆雷的概率是通过，遍历周围所有的已点方块，<strong>其周围没有找出的地雷数除以周围总的未点开方块数作为爆雷概率</strong>，遍历过程中，每个未点开方块的爆雷概率的最大值作为其爆雷概率。</p><h4 id="五、具体代码"><a href="#五、具体代码" class="headerlink" title="五、具体代码"></a>五、具体代码</h4><p><del>……之后会有代码查重，避嫌我就暂时不添加进来，提交之后有兴趣的同学可以回来康康具体代码。</del></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">////////////////////////////////////</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isLegalPlace</span><span class="params">(<span class="keyword">int</span> n , <span class="keyword">int</span> m , <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x &lt; <span class="number">0</span> || x &gt;= n || y &lt; <span class="number">0</span> || y &gt;= m)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">surroundMineNum</span><span class="params">(<span class="keyword">int</span> GamePanel[<span class="number">30</span>][<span class="number">30</span>], <span class="keyword">int</span> n, <span class="keyword">int</span> m , <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> <span class="comment">// 用于初步探测</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> surround[<span class="number">8</span>][<span class="number">2</span>] = &#123; &#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">-1</span>&#125; , &#123;<span class="number">1</span>,<span class="number">-1</span>&#125; ,&#123;<span class="number">-1</span>,<span class="number">1</span>&#125; &#125;; <span class="comment">// 表示周围八个位置与中间位置的坐标差</span></span><br><span class="line"><span class="keyword">int</span> mineNum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; ++i)</span><br><span class="line"><span class="keyword">if</span> (isLegalPlace(n, m, x + surround[i][<span class="number">0</span>], y + surround[i][<span class="number">1</span>]) </span><br><span class="line">&amp;&amp; GamePanel[x + surround[i][<span class="number">0</span>]][y + surround[i][<span class="number">1</span>]] == <span class="number">-1</span>)</span><br><span class="line">mineNum++;</span><br><span class="line"><span class="keyword">return</span> mineNum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">surroundMineNum_toFindPath</span><span class="params">(<span class="keyword">int</span> mineFlags[<span class="number">30</span>][<span class="number">30</span>], <span class="keyword">int</span> n, <span class="keyword">int</span> m, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> <span class="comment">// 用于找下一个可点位置</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> surround[<span class="number">8</span>][<span class="number">2</span>] = &#123; &#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">-1</span>&#125; , &#123;<span class="number">1</span>,<span class="number">-1</span>&#125; ,&#123;<span class="number">-1</span>,<span class="number">1</span>&#125; &#125;; <span class="comment">// 表示周围八个位置与中间位置的坐标差</span></span><br><span class="line"><span class="keyword">int</span> mineNum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; ++i)</span><br><span class="line"><span class="keyword">if</span> (isLegalPlace(n, m, x + surround[i][<span class="number">0</span>], y + surround[i][<span class="number">1</span>])</span><br><span class="line">&amp;&amp; mineFlags[x + surround[i][<span class="number">0</span>]][y + surround[i][<span class="number">1</span>]] == <span class="number">1</span>)</span><br><span class="line">mineNum++;</span><br><span class="line"><span class="keyword">return</span> mineNum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">surroundNotPointed</span><span class="params">(<span class="keyword">int</span> GamePanel[<span class="number">30</span>][<span class="number">30</span>], <span class="keyword">int</span> mineFlags[<span class="number">30</span>][<span class="number">30</span>], <span class="keyword">int</span> n, <span class="keyword">int</span> m, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> <span class="comment">// 确定(x,y)周围没有点的方块个数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> surround[<span class="number">8</span>][<span class="number">2</span>] = &#123; &#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">-1</span>&#125; , &#123;<span class="number">1</span>,<span class="number">-1</span>&#125; ,&#123;<span class="number">-1</span>,<span class="number">1</span>&#125; &#125;; <span class="comment">// 表示周围八个位置与中间位置的坐标差</span></span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> newX = x + surround[i][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">int</span> newY = y + surround[i][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (isLegalPlace(n , m , newX , newY) &amp;&amp; GamePanel[newX][newY] == <span class="number">-1</span> &amp;&amp; mineFlags[newX][newY] == <span class="number">0</span>)</span><br><span class="line">cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">surroundSureMine</span><span class="params">(<span class="keyword">int</span> mineFlags[<span class="number">30</span>][<span class="number">30</span>], <span class="keyword">int</span> n, <span class="keyword">int</span> m, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> <span class="comment">// 确定(x,y)周围确定的地雷个数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> surround[<span class="number">8</span>][<span class="number">2</span>] = &#123; &#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">-1</span>&#125; , &#123;<span class="number">1</span>,<span class="number">-1</span>&#125; ,&#123;<span class="number">-1</span>,<span class="number">1</span>&#125; &#125;; <span class="comment">// 表示周围八个位置与中间位置的坐标差</span></span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> newX = x + surround[i][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">int</span> newY = y + surround[i][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (isLegalPlace(n , m , newX , newY) &amp;&amp; mineFlags[newX][newY] == <span class="number">1</span>)</span><br><span class="line">cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> cnt;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">noPointed</span><span class="params">(<span class="keyword">int</span> GamePanel[<span class="number">30</span>][<span class="number">30</span>], <span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; ++i)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; m ; ++j)</span><br><span class="line"><span class="keyword">if</span> (GamePanel[i][j] != <span class="number">-1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">surroundByPointed</span><span class="params">(<span class="keyword">int</span> GamePanel[<span class="number">30</span>][<span class="number">30</span>] , <span class="keyword">int</span> x , <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> surround[<span class="number">8</span>][<span class="number">2</span>] = &#123; &#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">-1</span>&#125; , &#123;<span class="number">1</span>,<span class="number">-1</span>&#125; ,&#123;<span class="number">-1</span>,<span class="number">1</span>&#125; &#125;; <span class="comment">// 表示周围八个位置与中间位置的坐标差</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">8</span> ; ++i)</span><br><span class="line"><span class="keyword">if</span> (GamePanel[x+surround[i][<span class="number">0</span>]][y+surround[i][<span class="number">1</span>]] != <span class="number">-1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">randPoint</span><span class="params">(<span class="keyword">int</span> GamePanel[<span class="number">30</span>][<span class="number">30</span>] , <span class="keyword">int</span> mineFlags[<span class="number">30</span>][<span class="number">30</span>] , <span class="keyword">int</span> n , <span class="keyword">int</span> m)</span> <span class="comment">// 随机点未开方块爆炸的概率 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> mineNotFindNum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> notPointedNum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; ++i)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; m ; ++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (mineFlags[i][j] == <span class="number">0</span> &amp;&amp; GamePanel[i][j] == <span class="number">-1</span>)</span><br><span class="line">mineNotFindNum++;</span><br><span class="line"><span class="keyword">if</span> (GamePanel[i][j] == <span class="number">-1</span>)</span><br><span class="line">notPointedNum++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1.0</span>*mineNotFindNum/notPointedNum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">machine</span><span class="params">(<span class="keyword">int</span> GamePanel[<span class="number">30</span>][<span class="number">30</span>], <span class="keyword">int</span> n, <span class="keyword">int</span> m, <span class="keyword">int</span> &amp;x, <span class="keyword">int</span> &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//if (noPointed(GamePanel,n,m) == true)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//x = 0;</span></span><br><span class="line"><span class="comment">//y = 0;</span></span><br><span class="line"><span class="comment">//return;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="keyword">int</span> surround[<span class="number">8</span>][<span class="number">2</span>] = &#123; &#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">-1</span>&#125; , &#123;<span class="number">1</span>,<span class="number">-1</span>&#125; ,&#123;<span class="number">-1</span>,<span class="number">1</span>&#125; &#125;; <span class="comment">// 表示周围八个位置与中间位置的坐标差</span></span><br><span class="line"><span class="keyword">int</span> mineNum = <span class="number">0</span>; <span class="comment">// 可确定炸弹数量</span></span><br><span class="line"><span class="keyword">int</span> mineFlags[<span class="number">30</span>][<span class="number">30</span>]; <span class="comment">// 用于地雷去重</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">30</span> ; ++i)<span class="comment">// 0表示这里不是炸弹，1表示这里是炸弹</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; <span class="number">30</span> ; ++j)</span><br><span class="line">mineFlags[i][j] = <span class="number">0</span>;  </span><br><span class="line"><span class="keyword">int</span> pathX[<span class="number">400</span>], pathY[<span class="number">400</span>];</span><br><span class="line"><span class="keyword">int</span> pathNum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) <span class="comment">// 寻找可以确定的地雷位置</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (GamePanel[i][j] &lt;= <span class="number">0</span>)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (surroundMineNum(GamePanel, n, m, i, j) == GamePanel[i][j])</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">8</span>; ++k)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (isLegalPlace(n, m, i + surround[k][<span class="number">0</span>], j + surround[k][<span class="number">1</span>])</span><br><span class="line">&amp;&amp; GamePanel[i + surround[k][<span class="number">0</span>]][j + surround[k][<span class="number">1</span>]] == <span class="number">-1</span></span><br><span class="line">&amp;&amp; mineFlags[i + surround[k][<span class="number">0</span>]][j + surround[k][<span class="number">1</span>]] == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">mineFlags[i + surround[k][<span class="number">0</span>]][j + surround[k][<span class="number">1</span>]] = <span class="number">1</span>;</span><br><span class="line">mineNum++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (mineNum == <span class="number">0</span>) <span class="comment">// 当前没有可以确定的地雷</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 点四周的方块对之后更有利</span></span><br><span class="line"><span class="keyword">if</span> (GamePanel[<span class="number">0</span>][<span class="number">0</span>] == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">x = y = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (GamePanel[<span class="number">0</span>][m<span class="number">-1</span>] == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">x = <span class="number">0</span>;</span><br><span class="line">y = m<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (GamePanel[n<span class="number">-1</span>][<span class="number">0</span>] == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">x = n<span class="number">-1</span>;</span><br><span class="line">y = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (GamePanel[n<span class="number">-1</span>][m<span class="number">-1</span>] == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">x = n<span class="number">-1</span>;</span><br><span class="line">y = m<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; m ; ++i)</span><br><span class="line"><span class="keyword">if</span> (GamePanel[<span class="number">0</span>][y] == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">x = <span class="number">0</span>;</span><br><span class="line">y = rand()%m;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"> &#125; </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; m ; ++i)</span><br><span class="line"><span class="keyword">if</span> (GamePanel[n<span class="number">-1</span>][y] == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">x = n<span class="number">-1</span>;</span><br><span class="line">y = rand()%m;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"> &#125; </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; ++i)</span><br><span class="line"><span class="keyword">if</span> (GamePanel[x][<span class="number">0</span>]== <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">x = rand()%n;</span><br><span class="line">y = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"> &#125; </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; ++i)</span><br><span class="line"><span class="keyword">if</span> (GamePanel[x][m<span class="number">-1</span>] == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">x = rand()%n;</span><br><span class="line">y = m<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"> &#125; </span><br><span class="line">x = rand() % n;</span><br><span class="line">y = rand() % m;</span><br><span class="line"><span class="keyword">while</span> (GamePanel[x][y] != <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">x = rand() % n;</span><br><span class="line">y = rand() % m;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) <span class="comment">// 找下一个落脚点</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (GamePanel[i][j] &lt;= <span class="number">0</span>)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">int</span> tem;</span><br><span class="line"><span class="keyword">if</span> ((tem = surroundMineNum_toFindPath(mineFlags, n, m, i, j)) == GamePanel[i][j])</span><br><span class="line"><span class="comment">// 逻辑是遍历所有点，如果这个点周围的炸弹树等于这个点的标记数，</span></span><br><span class="line"><span class="comment">// 则他周围所有没有被标记为炸弹的点是可选点</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//cout &lt;&lt; i &lt;&lt; " " &lt;&lt; j &lt;&lt; " " &lt;&lt; tem &lt;&lt; endl;</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">8</span>; ++k)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (isLegalPlace(n, m, i + surround[k][<span class="number">0</span>], j + surround[k][<span class="number">1</span>])</span><br><span class="line">&amp;&amp; GamePanel[i + surround[k][<span class="number">0</span>]][j + surround[k][<span class="number">1</span>]] == <span class="number">-1</span></span><br><span class="line">&amp;&amp; mineFlags[i + surround[k][<span class="number">0</span>]][j + surround[k][<span class="number">1</span>]] == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">pathX[pathNum] = i + surround[k][<span class="number">0</span>];</span><br><span class="line">pathY[pathNum] = j + surround[k][<span class="number">1</span>];</span><br><span class="line">pathNum++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这里暂时将path中的第一个位置作为返回位置，我觉得在这里还能有所思考</span></span><br><span class="line"><span class="keyword">if</span> (pathNum) </span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 选择周围未点开方块最多的</span></span><br><span class="line"><span class="keyword">int</span> tem = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pathNum; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (surroundNotPointed(GamePanel, mineFlags, n, m, pathX[tem], pathY[tem]) &lt; surroundNotPointed(GamePanel, mineFlags, n, m, pathX[i], pathY[i]))</span><br><span class="line">tem = i;</span><br><span class="line">&#125;</span><br><span class="line">x = pathX[tem];</span><br><span class="line">y = pathY[tem];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="comment">// 没有可选点</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 分析随机点还是按概率点 </span></span><br><span class="line"><span class="keyword">double</span> prob[<span class="number">30</span>][<span class="number">30</span>];</span><br><span class="line"><span class="comment">//double randProb = randPoint;</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; ++i)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; m ; ++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (GamePanel[i][j] != <span class="number">-1</span> || mineFlags[i][j]) <span class="comment">// 当这个点已经点开，或者已经确定是炸弹，那么可以说他是炸弹的概率为1</span></span><br><span class="line">prob[i][j] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="comment">// 如果随机点每个方块爆炸的概率 </span></span><br><span class="line">prob[i][j] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; ++i)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; m ; ++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> surroundMineNum = surroundSureMine(mineFlags , n , m , i , j);</span><br><span class="line"><span class="keyword">int</span> surroundnotPointedNum = surroundNotPointed(GamePanel , mineFlags , n , m , i , j);</span><br><span class="line"><span class="keyword">double</span> probOfRandijSurround = <span class="number">1.0</span>*(GamePanel[i][j]-surroundMineNum)/surroundnotPointedNum; <span class="comment">// 随机点(i,j)周围的点爆雷的概率</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span> ; k &lt; <span class="number">8</span> ; ++k)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> newX = i+surround[k][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">int</span> newY = j+surround[k][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (isLegalPlace(n , m , newX , newY))</span><br><span class="line">prob[newX][newY] = probOfRandijSurround&gt;prob[newX][newY]?probOfRandijSurround:prob[newX][newY];</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> minProb = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; ++i) <span class="comment">// 寻找此时爆炸概率最低的方块 </span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; m ; ++j)</span><br><span class="line"><span class="keyword">if</span> (minProb &gt; prob[i][j])</span><br><span class="line">&#123;</span><br><span class="line">x = i;</span><br><span class="line">y = j;</span><br><span class="line">minProb = prob[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">////////////////////////////////</span></span><br></pre></td></tr></table></figure><p>时间复杂度：<strong>O(n)</strong></p><p>空间复杂度：<strong>O(n)</strong></p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> basic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django2与Django3之间的不同</title>
      <link href="/2020/02/15/Django-error-2-3/"/>
      <url>/2020/02/15/Django-error-2-3/</url>
      
        <content type="html"><![CDATA[<p>最近在复现别人django的一个电商系统项目，他用的是django2，而我使用的是django3。在调试的过程中，由于这两个版本之间某些语法或者是要求的不同，出现了很多bug。</p><p>从现在开始，这篇博文会写一些我在探索过程中对django2和django3不同点的总结。</p><h4 id="一、url-与path"><a href="#一、url-与path" class="headerlink" title="一、url()与path()"></a>一、<code>url()</code>与<code>path()</code></h4><p><code>url()</code>和<code>path()</code>都是用于实例化urlpatterns的函数。<code>url()</code>是在django1、django2中使用，并且在API文档中明确指出，<strong>在将来的版本中可能不推荐使用</strong>，他还有一个别名为<code>re_path()</code>。<code>path()</code>是django3中使用的函数，是<code>url()</code>的替代品。</p><p>首先需要知道几个问题：</p><p>1、urlpatterns是url配置URLconf中的一个列表，网站生成的请求会遍历urlpartterns寻找匹配的链接，遇到第一个会停下来。然后调用对应的view函数，返回对应的页面。</p><p>2、URLconf指的是默认生成的urls.py文件，在项目初始化（startproject）和应用初始化（startapp）时分别生成。</p><ul><li><p><code>*path(route , view , kwargs = None , name = None)*</code></p><p><img src="https://i.loli.net/2020/02/15/Tjc9J8P25EiA3eC.png" alt="image.png"></p><p><code>path()</code>函数返回要包含在urlpatterns中的元素。</p><p><strong>route参数</strong>应该是一个字符串，包含了一个URL模式。该字符串可能包含尖括号（eg：&lt; username &gt;），以捕获URL的一部分并<strong>将其作为关键字参数发送到view</strong>。尖括号可包含转换器规范（eg：&lt; int:year &gt;），该规范限制了匹配的字符，<strong>还可以更改传递给视图的变量的类型</strong>。例如，&lt; int : year&gt;匹配一串十进制数字并将该值转换为int。</p><p><strong>view参数</strong>是一个<strong>视图函数</strong>或是结果为基于类的视图的<strong>as_view()</strong>。它也可以是一个<strong>django.urls.include()</strong>。</p><p>include()函数是在调用项目中应用的URLconf（也就是对应应用下的urls.py文件）。</p><p><strong>kwargs参数</strong>可以将其他参数<strong>以字典的形式</strong>传递给视图函数。route参数中匹配的关键字、转换器规范转换的匹配字符都是通过kwargs参数来传递。<em>这个参数不是关键参数，可以忽略。</em></p><p><strong>name参数</strong>可以给这个url取一个合适的名字。通过给url取名字，以后在view或者模板中使用这个url，就只需要通过这个名字就可以了。这样做的原因是防止url更改，会导致其他用了这个url的地方都需要更改，但是如果取名字了，就不要做任何改动了。<em>这个参数不是关键参数，可以忽略。</em></p><p><em>附：在python编码中，使用 url = reverse(name) 进行查找 name 对应的url，然后可以用 redirect(url) 进行重定向。</em></p></li><li><p><code>re_path(route, view, kwargs=None, name=None) / url(route, view, kwargs=None, name=None)</code></p><p><code>url()</code>函数也是返回要包含在urlpatterns中的元素。</p><p>其中<em>view、kwargs、name</em>参数与path的用法相同，不同点在于route参数的使用。</p><p><strong>route参数</strong>是一个字符串参数，包含与Python的兼容的正则表达式 re 模块。字符串通常使用原始字符串语法（<code>r&#39;&#39;</code>），以便它们可以包含类似<code>\d</code>的序列，而无需用另一个反斜杠转义反斜杠。进行匹配时，将从正则表达式中捕获的组传递给视图-如果组已命名，则作为命名参数，否则传递为位置参数。这些值将作为字符串传递，而不进行任何类型转换。<em>这样就导致需要掌握正则表达式这个前导知识。</em></p></li></ul><h4 id="二、两个html语句"><a href="#二、两个html语句" class="headerlink" title="二、两个html语句"></a>二、两个html语句</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% load staticfiles %&#125;</span><br><span class="line">&#123;% load static %&#125;</span><br></pre></td></tr></table></figure><p>这两个都是在html文件中的语句，具体的语法我不了解，但我认为应该是加载静态文件目录的语句。当我的html文件中有前一个语句的时候，网页会出现错误：</p><p><img src="https://i.loli.net/2020/02/15/Xm1unhlTbUwS9qs.png" alt="image.png"></p><p>百度后得知，这是由于<strong>load staticfiles</strong>在django2.1就已经被弃用（不建议使用），并且在django3中直接移除，所以才会出现这样的错误。只需要将它改成<strong>load static</strong>就可以。</p><p>同样的，</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% load staticfiles %&#125;</span><br><span class="line">&#123;% load static from staticfiles %&#125;</span><br><span class="line">&#123;% load admin_static %&#125;</span><br></pre></td></tr></table></figure><p>也是相同的情况，不能在django3中使用，都需要将他们的内容替换成<strong>load static</strong>。</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> advanced </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>百题总结-1</title>
      <link href="/2020/02/11/%E7%99%BE%E9%A2%98%E6%80%BB%E7%BB%93-1/"/>
      <url>/2020/02/11/%E7%99%BE%E9%A2%98%E6%80%BB%E7%BB%93-1/</url>
      
        <content type="html"><![CDATA[<p>一学期的努力，于2月5日完成了自己的第一百道题（虽然这一天为了实现一百道疯狂滑水8道简单😂）。<br>这么长时间的刷题可以说是收获颇丰，我从以下几个角度谈一谈刷LeetCode的这个问题。</p><p>1、<strong>代码水平提高</strong>。这个方面是最重要，也是变化最大的一点，从一开始被各种问题打击，到现在对自己代码的自信；从刚开始提交无数次仍然报错，到现在很多题可以一遍过（<em>提交无数次报错还是和题目有关系，有的题就是各种各样你想不到的情况，这些问题真的是要自己去尝试，很多问题当时就是想不到</em>）；这些都是刷题的成长。</p><p>2、<strong>考虑问题更加全面</strong>。编写代码时难免会对问题考虑不全面，有时是问题理解错误，有时是由于代码细节的问题（<em>比如说编写BFS，如果直接将根节点压入队列，而在BFS函数中，仅在节点压队时判断NULL的情况，那么如果根节点为空，那么访问它的子节点时就会报错</em>）。刷题可以很好地解决这个问题，错多了再遇到自然也就有“肌肉记忆”了</p><p>3、<strong>督促自己</strong>。片段的时间可以做一道简单题，或者<strong>看看别人的题解（这一点极为关键）</strong>；中等题难度不一，都是和具体题目有关；大多数困难题都需要大块的时间来做，看题解、再写一遍，后面两步对我的提升非常大。刷LeetCode已经成了我闲下来的必备事情，有时闲着也是闲着，不如刷一刷LeetCode，AC带来的快乐又对刷题有能动的反作用。</p><p>4、<strong>锻炼手速</strong>（<em>手动狗头</em>）。打字速度飞速提升！</p><p>希望不久之后就能有第二百道的总结！</p>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode-over</title>
      <link href="/2020/02/11/LeetCode-over/"/>
      <url>/2020/02/11/LeetCode-over/</url>
      
        <content type="html"><![CDATA[<p>这是关于LeetCode在本博客的<strong>最后一篇文章</strong>，让我们悼念那些让我的博客显得臃肿无比的题解们。<br>但是令人开心的是：他们在新的地方获得新生，那就是使用<em>GitBook</em>做出的一个电子书（官方是这么形容的）。<br>之后刷LeetCode的题解都会发布在这里，我也会将它做成一个专栏，也希望大家能从中有所收获！<br><strong>最后附上链接：</strong> <a href="http://codebiluo.cn/myLeetCode/">http://codebiluo.cn/myLeetCode/</a></p><p>（初始加载会比较慢，请见谅）</p>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity+ARFoundation</title>
      <link href="/2020/02/04/Unity-ARFoundation/"/>
      <url>/2020/02/04/Unity-ARFoundation/</url>
      
        <content type="html"><![CDATA[<p>前两天想要上手Unity来AR方面的<del>项目</del>软件 ，探索过程中出现了各种各样的问题，现在将这个过程中遇到的各种各样问题梳理一下，希望后来者能开开心心上手Unity+AR。<br>注意：这是一篇踩坑博客，具体搭建还请自行百度。</p><h4 id="一、ARFoundation-or-ARCore-or-ARKit"><a href="#一、ARFoundation-or-ARCore-or-ARKit" class="headerlink" title="一、ARFoundation or ARCore or ARKit"></a>一、ARFoundation or ARCore or ARKit</h4><p>Unity作为一个平台，不直接提供XR（包括VR、AR和MR）的开发包，这时就需要其他公司提供各种各样的SDK工具包，国外有苹果公司的ARKit、谷歌公司的ARCore、Unity的ARFoundation，还有最近发现的OpenCVForUnity，而国内有EasyAR这些SDK工具包。ARKit是针对于IOS开发，ARCore是针对于Android开发，而我使用的是ARFoundation，这是Unity将ARKit和ARCore进一步整合的工作平台。<br>（这里就要说到一个应该知道的问题，<strong>IOS开发一定需要Mac，或者是电脑装双系统</strong>，据望网友<del>可靠</del>信息，如果使用虚拟机，龟速运行不说， 还会有很多Bug。）</p><h4 id="二、Android-JDK-amp-NDK"><a href="#二、Android-JDK-amp-NDK" class="headerlink" title="二、Android JDK &amp; NDK"></a>二、Android JDK &amp; NDK</h4><h5 id="1、解决方法"><a href="#1、解决方法" class="headerlink" title="1、解决方法"></a>1、解决方法</h5><p>这是搭建环境过程遇到的最让我头疼的问题，直接原因就是我对进度条的不信任。<br>当你进行Android开发时，需要将项目打包成apk，这时就需要Android JDK &amp; NDK工具包，这时你有两种选择<br>①、自行下载SDK manager和NDK；（这条路让我感受到世界的恶意）<br>②、使用Unity Hub直接下载<strong>Unity 2019.3.0f6 (64-bit)</strong>，这样可以直接添加各种模块；</p><h5 id="2、方法①"><a href="#2、方法①" class="headerlink" title="2、方法①"></a>2、方法①</h5><p>（想要较好解决方法的同学可以直接看方法②）<br>SDK和NDK下载可以直接从官网下载，建议使用Goole浏览器的迅雷插件，这样可以快一点。<br>SDK：<a href="https://www.androiddevtools.cn/" target="_blank" rel="noopener">https://www.androiddevtools.cn/</a><br>NDK：<a href="https://developer.android.google.cn/ndk/downloads/" target="_blank" rel="noopener">https://developer.android.google.cn/ndk/downloads/</a><br>下载SDK Tools后打开SDK manager再下载需要的对应工具，尽量下载最新版本。<br>下载NDK之后，就会遇到一个第一个问题：<strong>NDK版本不正确</strong><br><img src="https://img-blog.csdnimg.cn/2020020411555648.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTc1OTI2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>令人震惊的是，Unity要求的NDK版本的小版本号怎么这么长！（黑人问号脸）还能把所有小版本都发布吗！这就导致我花费了大量时间在下载NDK，大版本错完小版本错，小版本错完之后还有错。</p><h5 id="3、方法②"><a href="#3、方法②" class="headerlink" title="3、方法②"></a>3、方法②</h5><p>对比之下，方法②就非常好。下载了Unity Hub之后，添加Android Build Support以及其分目录的模块后，直接下载<strong>Unity 2019.3.0f6 (64-bit)</strong>或者是<strong>Unity 2019.2.20f1 (64-bit)</strong>。下载的过程比较漫长，需要耐心等待，但是面包总会有的。下载到五分之四的时候，进度条就会卡住，而由于我对进度条的不信任，我就直接取消下载转到方法一。。。<br>所以使用这个方法你只要相信进度条即可。</p><h4 id="三、Mininum-API-Level"><a href="#三、Mininum-API-Level" class="headerlink" title="三、Mininum API Level"></a>三、Mininum API Level</h4><p>配置环境的过程，有一个步骤时设置Mininum API Level，而我想的是设置的小一些，一定不会有问题，但事实不是如此。当我将其设置为最小的API Level 19：<br><img src="https://img-blog.csdnimg.cn/20200204121749589.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTc1OTI2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>在编译运行的时候，会出现报错：<br><img src="https://img-blog.csdnimg.cn/20200204121842202.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTc1OTI2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这时需要将Mininum API Level设置的大一些，比如<strong>我设置的是API Level 24</strong>，就可以成功编译。</p><h4 id="四、Building-Gradle-Project"><a href="#四、Building-Gradle-Project" class="headerlink" title="四、Building Gradle Project"></a>四、Building Gradle Project</h4><p>最终编译的时候，进度条再一次卡住/(ㄒoㄒ)/~~，这时编译进行到<strong>Building Gradle Project</strong>，Unity会直接卡死。</p><blockquote><p>Gradle是一个基于JVM的构建工具，是一款通用灵活的构建工具，支持maven， Ivy仓库，支持传递性依赖管理，而不需要远程仓库或者是pom.xml和ivy.xml配置文件，基于Groovy，build脚本使用Groovy编写。——百度百科</p></blockquote><p>而编译卡在这里的原因由于本地并没有Gradle，所以编译时需要下载，而外网资源下载速度我不用再提，<strong>据网友信息，他编译数小时后成功了！</strong> 真是很短的时间呢！<br>但我采取了其他的方法：<strong>预先下载Gradle</strong>。<br>我下载的是gradle-5.4.1，之后在Edit-&gt;Preferences中将下载内容的地址输入到Gradle中。<img src="https://img-blog.csdnimg.cn/20200204123416425.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTc1OTI2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>辛苦一整天，遇到诸多艰难，所幸克服，没有放弃，坚持走下去咯！</strong></p>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django-4</title>
      <link href="/2020/01/27/Django-4/"/>
      <url>/2020/01/27/Django-4/</url>
      
        <content type="html"><![CDATA[<h4 id="•-编写一个用于问题显示的表单（form）"><a href="#•-编写一个用于问题显示的表单（form）" class="headerlink" title="• 编写一个用于问题显示的表单（form）"></a>• 编写一个用于问题显示的表单（form）</h4><p>form是HTML的一个元素，修改<em>polls/detail.html</em></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; question.question_text &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">&#123;% if error_message %&#125;<span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>&#123;&#123; error_message &#125;&#125;<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span>&#123;% endif %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"&#123;% url 'polls:vote' question.id %&#125;"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">&#123;% csrf_token %&#125;</span><br><span class="line">&#123;% for choice in question.choice_set.all %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"choice"</span> <span class="attr">id</span>=<span class="string">"choice&#123;&#123; forloop.counter &#125;&#125;"</span> <span class="attr">value</span>=<span class="string">"&#123;&#123; choice.id &#125;&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"choice&#123;&#123; forloop.counter &#125;&#125;"</span>&gt;</span>&#123;&#123; choice.choice_text &#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Vote"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这部分涉及HTML相关内容，不再赘述</p><h4 id="•-添加投票界面的相关内容"><a href="#•-添加投票界面的相关内容" class="headerlink" title="• 添加投票界面的相关内容"></a>• 添加投票界面的相关内容</h4><p>添加关于<em>polls/views.py</em>的vote()函数的相关实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse, HttpResponseRedirect</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> get_object_or_404, render</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> reverse</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Choice, Question</span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">vote</span><span class="params">(request, question_id)</span>:</span></span><br><span class="line">    question = get_object_or_404(Question, pk=question_id)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        selected_choice = question.choice_set.get(pk=request.POST[<span class="string">'choice'</span>])</span><br><span class="line">    <span class="keyword">except</span> (KeyError, Choice.DoesNotExist):</span><br><span class="line">        <span class="comment"># Redisplay the question voting form.</span></span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">'polls/detail.html'</span>, &#123;</span><br><span class="line">            <span class="string">'question'</span>: question,</span><br><span class="line">            <span class="string">'error_message'</span>: <span class="string">"You didn't select a choice."</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        selected_choice.votes += <span class="number">1</span></span><br><span class="line">        selected_choice.save()</span><br><span class="line">        <span class="comment"># Always return an HttpResponseRedirect after successfully dealing</span></span><br><span class="line">        <span class="comment"># with POST data. This prevents data from being posted twice if a</span></span><br><span class="line">        <span class="comment"># user hits the Back button.</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponseRedirect(reverse(<span class="string">'polls:results'</span>, args=(question.id,)))</span><br></pre></td></tr></table></figure><p>相关内容说明：<br>1、<strong>request.POST</strong>是类似于字典的对象，可让您通过键名访问提交的数据。在这种情况下， <strong>request.POST[‘choice’]</strong>以字符串形式返回所选选项的<strong>ID</strong>。<strong>request.POST</strong>值始终是字符串。</p><p>请注意，<strong>Django</strong>还提供<strong>request.GET</strong>了以相同方式访问<strong>GET</strong>数据的方法-但我们<strong>request.POST</strong>在代码中明确使用，以确保仅通过<strong>POST</strong>调用更改数据。</p><p>2、如果没有提供<strong>POST</strong>数据，那么就会产生<strong>KEYERROR</strong>异常，重新显示问题表单。</p><p>3、在此示例reverse()中，我们在<strong>HttpResponseRedirect</strong>构造函数中使用该函数 。此功能有助于避免在视图功能中对URL进行硬编码。它提供了我们想要将控制权传递给的视图的名称，以及指向该视图的URL模式的可变部分。在这种情况下，使用我们在教程3中设置的<strong>URLconf</strong> ，此<strong>reverse()</strong>调用将返回一个字符串，例如’/polls/3/results/‘，其中3是的值<strong>question.id</strong>。然后，此重定向的URL将调用<strong>‘results’</strong>视图以显示最后一页。</p><h4 id="•-投票结果页面相关内容"><a href="#•-投票结果页面相关内容" class="headerlink" title="• 投票结果页面相关内容"></a>• 投票结果页面相关内容</h4><p>进行投票之后，vote()视图将重定向到该问题的结果页面，故编写视图在<em>views.py</em>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> get_object_or_404, render</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">results</span><span class="params">(request, question_id)</span>:</span></span><br><span class="line">    question = get_object_or_404(Question, pk=question_id)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'polls/results.html'</span>, &#123;<span class="string">'question'</span>: question&#125;)</span><br></pre></td></tr></table></figure><p>同时创建<em>polls/results.html</em>模板：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; question.question_text &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">&#123;% for choice in question.choice_set.all %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; choice.choice_text &#125;&#125; -- &#123;&#123; choice.votes &#125;&#125; vote&#123;&#123; choice.votes|pluralize &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'polls:detail' question.id %&#125;"</span>&gt;</span>Vote again?<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>现在可以运行服务器，来看一看问题页面、投票页面和投票结果显示页面，</p><h4 id="•-使用通用视图来减少代码量"><a href="#•-使用通用视图来减少代码量" class="headerlink" title="• 使用通用视图来减少代码量"></a>• 使用通用视图来减少代码量</h4><p>在 <strong>detail()</strong> 和 <strong>results()</strong> 的视图函数是非常短并且相似，所以重复的代码是冗余的。<br>这些视图代表了基本Web开发的一种常见情况：根据URL中传递的参数从数据库获取数据，加载模板并返回渲染的模板。因为这很常见，所以Django提供了一个捷径，称为“<strong>通用视图</strong>”系统。<br>为了转换为通用视图系统，需要经过一些步骤：<br>    1. 转换URLconf。<br>    2. 删除一些旧的不需要的视图。<br>    3. 根据Django的通用视图介绍新视图。 </p><p><strong>修改URL配置</strong><br>首先对<em>polls/urls.py</em>的URLconf进行修改：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line">app_name = <span class="string">'polls'</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">''</span>, views.IndexView.as_view(), name=<span class="string">'index'</span>),</span><br><span class="line">    path(<span class="string">'&lt;int:pk&gt;/'</span>, views.DetailView.as_view(), name=<span class="string">'detail'</span>),</span><br><span class="line">    path(<span class="string">'&lt;int:pk&gt;/results/'</span>, views.ResultsView.as_view(), name=<span class="string">'results'</span>),</span><br><span class="line">    path(<span class="string">'&lt;int:question_id&gt;/vote/'</span>, views.vote, name=<span class="string">'vote'</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>修改的是将更改<question_id>为<pk>。</p><p><strong>修改视图</strong><br>将<em>polls/views.py</em>修改为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponseRedirect</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> get_object_or_404, render</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> reverse</span><br><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> generic</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Choice, Question</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexView</span><span class="params">(generic.ListView)</span>:</span></span><br><span class="line">    template_name = <span class="string">'polls/index.html'</span></span><br><span class="line">    context_object_name = <span class="string">'latest_question_list'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_queryset</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""Return the last five published questions."""</span></span><br><span class="line">        <span class="keyword">return</span> Question.objects.order_by(<span class="string">'-pub_date'</span>)[:<span class="number">5</span>]</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DetailView</span><span class="params">(generic.DetailView)</span>:</span></span><br><span class="line">    model = Question</span><br><span class="line">    template_name = <span class="string">'polls/detail.html'</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ResultsView</span><span class="params">(generic.DetailView)</span>:</span></span><br><span class="line">    model = Question</span><br><span class="line">    template_name = <span class="string">'polls/results.html'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">vote</span><span class="params">(request, question_id)</span>:</span></span><br><span class="line">    ... <span class="comment"># same as above, no changes needed.</span></span><br></pre></td></tr></table></figure><p>在这里使用了两个通用视图<strong>ListView</strong>和<strong>DetailView</strong>，分别抽象了“显示对象列表”和“显示特定类型的对象的详细信息页面”的概念。</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> basic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django-3</title>
      <link href="/2020/01/22/Django-3/"/>
      <url>/2020/01/22/Django-3/</url>
      
        <content type="html"><![CDATA[<h2 id="•-视图"><a href="#•-视图" class="headerlink" title="• 视图"></a>• 视图</h2><p><strong>视图其实是视图函数的简称</strong>，视图是Django应用程序中网页的“类型”，通常具有特定功能并具有特定模板。<br>在Django中，网页和其他内容是通过视图传递的。每个视图均由Python函数（或方法（对于基于类的视图而言））表示。Django将通过检查所请求的URL（准确地说，是域名之后的URL部分）来选择视图。</p><h2 id="•-URL"><a href="#•-URL" class="headerlink" title="• URL"></a>• URL</h2><p><strong>URL即统一资源定位符</strong>，是每一个信息资源都有统一的且在网上唯一的地址。<br><strong>URLconfs即URL模式</strong>，是URL的一般形式Django提供了更加优雅的URL模式，例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/newsarchive/<span class="tag">&lt;<span class="name">year</span>&gt;</span>/<span class="tag">&lt;<span class="name">month</span>&gt;</span>/</span><br></pre></td></tr></table></figure><h2 id="•-添加更多的视图"><a href="#•-添加更多的视图" class="headerlink" title="• 添加更多的视图"></a>• 添加更多的视图</h2><p>更改<em>views.py</em>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">detail</span><span class="params">(request, question_id)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">"You're looking at question %s."</span> % question_id)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">results</span><span class="params">(request, question_id)</span>:</span></span><br><span class="line">    response = <span class="string">"You're looking at the results of question %s."</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(response % question_id)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">vote</span><span class="params">(request, question_id)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">"You're voting on question %s."</span> % question_id)</span><br></pre></td></tr></table></figure><p>并更改<em>polls.urls.py</em>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># ex: /polls/</span></span><br><span class="line">    path(<span class="string">''</span>, views.index, name=<span class="string">'index'</span>),</span><br><span class="line">    <span class="comment"># ex: /polls/5/</span></span><br><span class="line">    path(<span class="string">'&lt;int:question_id&gt;/'</span>, views.detail, name=<span class="string">'detail'</span>),</span><br><span class="line">    <span class="comment"># ex: /polls/5/results/</span></span><br><span class="line">    path(<span class="string">'&lt;int:question_id&gt;/results/'</span>, views.results, name=<span class="string">'results'</span>),</span><br><span class="line">    <span class="comment"># ex: /polls/5/vote/</span></span><br><span class="line">    path(<span class="string">'&lt;int:question_id&gt;/vote/'</span>, views.vote, name=<span class="string">'vote'</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>根据输入的URL地址，<strong>通过遍历的方式寻找匹配的URL模式串</strong>，并调用相对应的视图函数，相应相对应的网页。<br>比如说，当有人从网站请求页面时，例如“ / polls / 34 /”，Django将加载<em>mysite.urls</em>的Python模块，因为该<em>ROOT_URLCONF</em>设置指向该模块 。它找到名为的变量urlpatterns并按顺序遍历模式。在找到匹配项之后’polls/‘，它将剥离匹配的文本（”polls/“），并将其余文本–发送 “34/“到’polls.urls’URLconf进行进一步处理。在那里匹配’<a href="int:question_id">int:question_id</a>/‘，从而导致对detail()视图的调用，如下所示：<br>detail(request=<HttpRequest object>, question_id=34)</p><h2 id="•-编写更强大的视图"><a href="#•-编写更强大的视图" class="headerlink" title="• 编写更强大的视图"></a>• 编写更强大的视图</h2><p>每个视图负责执行以下两项操作之一：<strong>返回HttpResponse包含所请求页面内容的对象，或者引发诸如之类的异常Http404</strong>。<br>HttpResponse需要自己对其进行填充，而HttpRequest是Django自己生成。<br>视图可以从数据库中读取记录，也可以使用Django等模板系统，也可以不使用第三方Python模板系统。它还可以使用所需的任何Python库生成PDF文件，输出XML，或即时创建ZIP文件。<br>在<em>view.py</em>添加代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    latest_question_list = Question.objects.order_by(<span class="string">'-pub_date'</span>)[:<span class="number">5</span>]</span><br><span class="line">    output = <span class="string">', '</span>.join([q.question_text <span class="keyword">for</span> q <span class="keyword">in</span> latest_question_list])</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(output)</span><br><span class="line">    <span class="comment"># Leave the rest of the views (detail, results, vote) unchanged</span></span><br></pre></td></tr></table></figure><h2 id="•-将模板与视图创建的硬编码分开"><a href="#•-将模板与视图创建的硬编码分开" class="headerlink" title="• 将模板与视图创建的硬编码分开"></a>• 将模板与视图创建的硬编码分开</h2><p>首先，在目录templates中创建一个polls目录。Django将在那里寻找模板。<br>您的项目TEMPLATES置描述了Django如何加载和呈现模板。默认设置文件配置一个DjangoTemplates 后端，其APP_DIRS选项设置为 True。按照惯例DjangoTemplates，在每个文件夹中都会寻找一个“模板”子目录INSTALLED_APPS。<br>在<em>polls/templates/polls/</em>添加一个模板：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if latest_question_list %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    &#123;% for question in latest_question_list %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/polls/&#123;&#123; question.id &#125;&#125;/"</span>&gt;</span>&#123;&#123; question.question_text &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>No polls are available.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>现在运行服务器之后，可以子项/polls来加载一个“最新消息”列表。</p><h2 id="•-快捷方式"><a href="#•-快捷方式" class="headerlink" title="• 快捷方式"></a>• 快捷方式</h2><p>加载模板，填充上下文并使用渲染后的模板的结果返回对象HttpResponse是一种非常常见的用法。<br>同时，Django提供了一种快捷方式。重写index()：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    latest_question_list = Question.objects.order_by(<span class="string">'-pub_date'</span>)[:<span class="number">5</span>]</span><br><span class="line">    context = &#123;<span class="string">'latest_question_list'</span>: latest_question_list&#125;</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'polls/index.html'</span>, context)</span><br></pre></td></tr></table></figure><p>该render()函数将<strong>请求对象作为其第一个参数，将模板名称作为其第二个参数，并将字典作为其可选的第三个参数</strong>。它返回使用HttpResponse 给定上下文呈现的给定模板的对象。</p><h2 id="•-404错误"><a href="#•-404错误" class="headerlink" title="• 404错误"></a>• 404错误</h2><p>在<em>views.py</em>中添加代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> Http404</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">detail</span><span class="params">(request, question_id)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        question = Question.objects.get(pk=question_id)</span><br><span class="line">    <span class="keyword">except</span> Question.DoesNotExist:</span><br><span class="line">        <span class="keyword">raise</span> Http404(<span class="string">"Question does not exist"</span>)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'polls/detail.html'</span>, &#123;<span class="string">'question'</span>: question&#125;)</span><br></pre></td></tr></table></figure><p>为了快速使示例正常工作，对应模板<em>polls/templates/polls/detail.html</em><br>中只添加：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; question &#125;&#125;</span><br></pre></td></tr></table></figure><p>现在运行服务器，可以看到更完整的polls网页  </p><h2 id="•-404的快捷方式"><a href="#•-404的快捷方式" class="headerlink" title="• 404的快捷方式"></a>• 404的快捷方式</h2><p>重写detail()函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> get_object_or_404, render</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">detail</span><span class="params">(request, question_id)</span>:</span></span><br><span class="line">    question = get_object_or_404(Question, pk=question_id)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'polls/detail.html'</span>, &#123;<span class="string">'question'</span>: question&#125;)</span><br></pre></td></tr></table></figure><h2 id="•-使用模板系统"><a href="#•-使用模板系统" class="headerlink" title="• 使用模板系统"></a>• 使用模板系统</h2><p><em>polls/detail.html</em>改写为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; question.question_text &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">&#123;% for choice in question.choice_set.all %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; choice.choice_text &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>模板系统使用点查找语法来访问变量属性。在的示例中，首先Django在对象上进行字典查找。如果失败，它将尝试属性查找-在这种情况下可以工作。如果属性查找失败，它将尝试进行列表索引查找。</p><h2 id="•-命名空间URL名称"><a href="#•-命名空间URL名称" class="headerlink" title="• 命名空间URL名称"></a>• 命名空间URL名称</h2><p>在实际的Django项目中，可能有很多个应用程序，Django如何区分它们之间的URL名称呢？答案是将名称空间添加到URLconf中。<br>在polls/urls.py中添加app_name以设置为应用程序名称空间：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> pat</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line">app_name = <span class="string">'polls'</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">''</span>, views.index, name=<span class="string">'index'</span>),</span><br><span class="line">    path(<span class="string">'&lt;int:question_id&gt;/'</span>, views.detail, name=<span class="string">'detail'</span>),</span><br><span class="line">    path(<span class="string">'&lt;int:question_id&gt;/results/'</span>, views.results, name=<span class="string">'results'</span>),</span><br><span class="line">    path(<span class="string">'&lt;int:question_id&gt;/vote/'</span>, views.vote, name=<span class="string">'vote'</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>这样可以区分多个应用程序的URL名称。</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> basic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django-2</title>
      <link href="/2020/01/19/Django-2/"/>
      <url>/2020/01/19/Django-2/</url>
      
        <content type="html"><![CDATA[<h2 id="•-数据库设置"><a href="#•-数据库设置" class="headerlink" title="• 数据库设置"></a>• 数据库设置</h2><p>默认使用SQLite，相关的设置都在<em>setting.py</em>文件中进行。</p><p><em>setting,py</em>中还有其他设置：<br>INSTALLED_APPS文件顶部的设置。该名称包含在此Django实例中激活的所有Django应用程序的名称。其中包含一些默认的应用程序。不需要时可以在INSTALLED_APPS中删去。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure><p>该migrate命令将查看该INSTALLED_APPS设置，并根据<em>mysite/settings.py</em>文件中的数据库设置以及应用程序随附的数据库迁移来创建任何必要的数据库表。</p><h2 id="•-创建模型"><a href="#•-创建模型" class="headerlink" title="• 创建模型"></a>• 创建模型</h2><p>模型是相关数据的唯一、确定的事实来源。它包含要存储数据的基本字段和行为。也就是一个包含各种属性（数据）和方法（行为）的类。<br>比如说：<br>在民意调查应用中，我们将创建两个模型：Question和Choice。Question有一个问题和出版日期。Choice有两个字段：选择的文本和投票提示。每个Choice都与关联Question。</p><p>在<em>polls/models.py</em>文件中添加代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from django.db import models</span><br><span class="line">class Question(models.Model):</span><br><span class="line">    question_text &#x3D; models.CharField(max_length&#x3D;200)</span><br><span class="line">    pub_date &#x3D; models.DateTimeField(&#39;date published&#39;)</span><br><span class="line">class Choice(models.Model):</span><br><span class="line">    question &#x3D; models.ForeignKey(Question, on_delete&#x3D;models.CASCADE)</span><br><span class="line">    choice_text &#x3D; models.CharField(max_length&#x3D;200)</span><br><span class="line">    votes &#x3D; models.IntegerField(default&#x3D;0)</span><br></pre></td></tr></table></figure><p>在这里，==每个模型都是django.db.models.Model的子类==。每个模型都有许多类变量，每个类变量代表模型中的数据库字段。==每一个字段都是一个Field的实例==，不同的Field代表了不同类型的数据。</p><h2 id="•-激活模型"><a href="#•-激活模型" class="headerlink" title="• 激活模型"></a>• 激活模型</h2><p>为了包含应用，需要将应用的引用添加在设置的INSTALLED_APPS中，也就是将<br>polls.apps.PollsConfig添加到INSTALLED_APPS中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS &#x3D; [</span><br><span class="line">    &#39;polls.apps.PollsConfig&#39;,</span><br><span class="line">    &#39;django.contrib.admin&#39;,</span><br><span class="line">    &#39;django.contrib.auth&#39;,</span><br><span class="line">    &#39;django.contrib.contenttypes&#39;,</span><br><span class="line">    &#39;django.contrib.sessions&#39;,</span><br><span class="line">    &#39;django.contrib.messages&#39;,</span><br><span class="line">    &#39;django.contrib.staticfiles&#39;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py makemigrations polls</span><br></pre></td></tr></table></figure><p>表示对模型进行了一些修改，称之为<strong>迁移（migration）</strong>，会生成一个<em>polls/migrations/0001_initial.py</em>文件，可以进行人工编辑。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py sqlmigrate polls 0001</span><br></pre></td></tr></table></figure><p>可以看到SQL中，进行了那些迁移操作。</p><p><strong>注：</strong><br>1、数据表的名称是将应用名称和模型名称的小写组合起来自动生成的；<br>2、Django将附加”_id”到外键字段名称。<br>3、该sqlmigrate命令<strong>==实际上并未在数据库上运行迁移-而是将其打印到屏幕上==</strong>，以便您可以查看SQL Django认为需要的内容。这对于检查Django将要执行的操作或是否有需要SQL脚本进行更改的数据库管理员很有用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py check</span><br></pre></td></tr></table></figure><p>检查项目中是否存在任何问题，而无需进行迁移或接触数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure><p>获取所有尚未应用的迁移，并针对数据库来运行它们，实际上就是根据之前的修改来改变数据库。</p><p>模型更改的三步：<br>    <strong>• 更改模型（在<em>models.py</em>中）。<br>    • 运行为这些更改创建迁移 python manage.py makemigrations<br>    • 运行以将那些更改应用到数据库 python manage.py migrate</strong></p><p>Django Admin介绍<br>admin是作为网站管理员存在</p><h2 id="•-创建管理员用户"><a href="#•-创建管理员用户" class="headerlink" title="• 创建管理员用户"></a>• 创建管理员用户</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py createsuperuser</span><br></pre></td></tr></table></figure><p>之后按提示信息输入内容（在输入密码的时候，可能会有密码无回显的情况，只需正常输入，不会有其他影响，我的环境是Python3.8+Django3.0）</p><p>然后运行服务器，输入<a href="http://127.0.0.1:8000/admin/" target="_blank" rel="noopener">http://127.0.0.1:8000/admin/</a><br>会显示管理员登录界面：<br><img src="https://img-blog.csdnimg.cn/20200115172844937.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTc1OTI2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>注意这里输入的不是，这个网页出现的会是错误页面：<br><img src="https://img-blog.csdnimg.cn/20200115172852382.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTc1OTI2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>修改<em>polls/admin.py</em>之后，应用就可以出现在管理员页面上。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from django.contrib import admin</span><br><span class="line">from .models import Question</span><br><span class="line">admin.site.register(Question)</span><br></pre></td></tr></table></figure><p>之后可以通过管理员界面对Question数据库进行修改。</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> basic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django-1</title>
      <link href="/2020/01/19/Django-1/"/>
      <url>/2020/01/19/Django-1/</url>
      
        <content type="html"><![CDATA[<h2 id="•-创建项目"><a href="#•-创建项目" class="headerlink" title="• 创建项目"></a>• 创建项目</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">django-admin startproject mysite</span><br></pre></td></tr></table></figure><p>创建了mysite目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysite&#x2F;</span><br><span class="line">    manage.py #一个命令行实用程序，可让您以各种方式与该Django项目进行交互。</span><br><span class="line">    mysite&#x2F;</span><br><span class="line">        __init__.py</span><br><span class="line">        settings.py #此Django项目的设置&#x2F;配置。</span><br><span class="line">        urls.py #此Django项目的URL声明；Django支持的网站的“目录”。</span><br><span class="line">        asgi.py</span><br><span class="line">        wsgi.py</span><br></pre></td></tr></table></figure><h2 id="•-运行服务器"><a href="#•-运行服务器" class="headerlink" title="• 运行服务器"></a>• 运行服务器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Python manage.py runserver</span><br></pre></td></tr></table></figure><p>在浏览器中搜索<a href="http://127.0.0.1:8000/，就能看到Django火箭：" target="_blank" rel="noopener">http://127.0.0.1:8000/，就能看到Django火箭：</a><br><img src="https://img-blog.csdnimg.cn/20200105125207937.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTc1OTI2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="•-创建应用程序（polls应用）"><a href="#•-创建应用程序（polls应用）" class="headerlink" title="• 创建应用程序（polls应用）"></a>• 创建应用程序（polls应用）</h2><p>项目和应用之间有什么区别？<strong>应用程序是执行某项操作的Web应用程序</strong>，例如Weblog系统，公共记录数据库或小型民意调查应用程序。<strong>项目是特定网站的配置和应用程序的集合。一个项目可以包含多个应用程序。一个应用程序可以在多个项目中。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py startapp polls</span><br></pre></td></tr></table></figure><p>创建了polls目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">polls&#x2F;</span><br><span class="line">    __init__.py</span><br><span class="line">    admin.py</span><br><span class="line">    apps.py</span><br><span class="line">    migrations&#x2F;</span><br><span class="line">        __init__.py</span><br><span class="line">    models.py</span><br><span class="line">    tests.py</span><br><span class="line">    views.py</span><br></pre></td></tr></table></figure><h2 id="•-第一个视图函数"><a href="#•-第一个视图函数" class="headerlink" title="• 第一个视图函数"></a>• 第一个视图函数</h2><p>每一个请求的url地址，都对应着一个函数，叫视图函数，由视图函数处理请求后，再返回页面内容给浏览器显示。<br>在<strong>polls/views.py</strong>中添加代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from django.http import HttpResponse</span><br><span class="line"></span><br><span class="line">def index(request):</span><br><span class="line">        Return HttpResponse(&quot;Hello,world.You&#39;reatthepollsindex.&quot;)</span><br></pre></td></tr></table></figure><h2 id="•-创建URL关系"><a href="#•-创建URL关系" class="headerlink" title="• 创建URL关系"></a>• 创建URL关系</h2><p>polls目录中创建URLconf，即创建一个urls.py文件，包含如下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from django.urls import path</span><br><span class="line"></span><br><span class="line">from . import views</span><br><span class="line"></span><br><span class="line">urlpatterns&#x3D;[</span><br><span class="line">path(&#39;&#39;,  views.index, name&#x3D;&#39;index&#39;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在项目之下的urls.py文件（mysite/urls.py）中加入代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from django.contrib import admin</span><br><span class="line">from django.urls import include,path</span><br><span class="line"></span><br><span class="line">urlpatterns&#x3D;[</span><br><span class="line">path(&#39;polls&#x2F;&#39;,include(&#39;polls.urls&#39;)),</span><br><span class="line">path(&#39;admin&#x2F;&#39;,admin.site.urls),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>重点：项目和应用之下urls.py文件的不同</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 项目下的urls.py</span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    ...</span><br><span class="line">    # 包含应用下的urls.py文件</span><br><span class="line">    url(正则表达式, include(&#39;应用名.urls&#39;))</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 应用下的urls.py</span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line"> </span><br><span class="line">   # 该path()函数传递了四个参数，两个是必需的 route和view，</span><br><span class="line">   # 以及两个可选的kwargs和name。</span><br><span class="line">   path(route , view , kwargs , name),</span><br><span class="line">        # route：route是包含URL模式的字符串。在处理请求时，</span><br><span class="line">        # Django从第一个模式开始，urlpatterns然后沿列表向下移动，</span><br><span class="line">        # 将请求的URL与每个模式进行比较，直到找到匹配的URL。</span><br><span class="line">        # view：当Django找到匹配的模式时，使用HttpRequest对象作为第一个参数，</span><br><span class="line">        # 并将路线中所有“捕获的”值作为关键字参数，调用指定的view函数。</span><br><span class="line">        # name：命名URL可以使您在Django中的其他地方（尤其是在模板内部）</span><br><span class="line">        # 明确地引用它。这项强大的功能可让您仅触摸单个文件</span><br><span class="line">        # 即可对项目的URL模式进行全局更改。</span><br><span class="line">]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> basic </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
