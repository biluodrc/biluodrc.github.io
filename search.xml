<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>HTML初探笔记</title>
      <link href="/2020/03/05/HTMLfirstExploration/"/>
      <url>/2020/03/05/HTMLfirstExploration/</url>
      
        <content type="html"><![CDATA[<p>这篇文章不作为分享，只是我学习前端的笔记，摘抄网上关于HTML的教程。如想学习这方面的知识，千万不要看我这样的摘要式笔记！</p><h4 id="一、代码解读"><a href="#一、代码解读" class="headerlink" title="一、代码解读"></a>一、代码解读</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">bgcolor</span>=<span class="string">"white"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span> 标题1 <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span> 标题2 <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span> 标题3 <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span> 标题4 <span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> 段落1 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> 段落            2 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 这是注释 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span> = <span class="string">"http://www.codebiluo.cn"</span>&gt;</span>a link <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span> = <span class="string">"https://ae01.alicdn.com/kf/Ueb18a569429c4c6eb8545b0f6f7fcbd5g.jpg"</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"200"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">1、&lt;html&gt; 与 &lt;&#x2F;html&gt; 之间的文本描述网页，定义了整个 HTML 文档。</span><br><span class="line"></span><br><span class="line">2、&lt;body&gt; 与 &lt;&#x2F;body&gt; 之间的文本是可见的页面内容。&lt;body bgcolor&#x3D;&quot;white&quot;&gt;中bgcolor属性更改了背景颜色。</span><br><span class="line"></span><br><span class="line">3、&lt;h1&gt; 与 &lt;&#x2F;h1&gt; 之间的文本被显示为标题，HTML 标题（Heading）是通过 &lt;h1&gt; - &lt;h6&gt; 等标签进行定义的。&lt;h1 align&#x3D;&quot;center&quot;&gt;中align属性使标题进行了居中排列。</span><br><span class="line">head的缩写</span><br><span class="line"></span><br><span class="line">4、&lt;p&gt; 与 &lt;&#x2F;p&gt; 之间的文本被显示为段落。</span><br><span class="line">paragraph的缩写</span><br><span class="line"></span><br><span class="line">5、HTML 链接是通过 &lt;a&gt; 标签进行定义的，在 href 属性中指定链接的地址。（在a link之前的空格都会被忽略**）（**这里的www.codebiluo.cn是不可访问的，他是以当前文本所在路径进行相对路径访问）</span><br><span class="line">anchor text的缩写，锚文本</span><br><span class="line"></span><br><span class="line">6、HTML 图像是通过 &lt;img&gt; 标签进行定义的，图像的名称和尺寸是以属性的形式提供的。</span><br><span class="line"></span><br><span class="line">7、&lt;br&gt;就是没有关闭标签的空元素（&lt;br&gt; 标签定义换行）。在开始标签中添加斜杠，比如 &lt;br &#x2F;&gt;，是关闭空元素的正确方法，HTML、XHTML 和 XML 都接受这种方式。</span><br><span class="line">即使&lt;br&gt;在所有浏览器中都是有效的，但使用&lt;br &#x2F;&gt;其实是更长远的保障。</span><br><span class="line">barter rabbet的缩写</span><br><span class="line"></span><br><span class="line">8、&lt;hr&#x2F;&gt;标签在 HTML 页面中创建水平线。</span><br><span class="line">horizontal rule的缩写</span><br><span class="line"></span><br><span class="line">9、&lt;!-- --&gt;用于添加注释。</span><br></pre></td></tr></table></figure><h4 id="二、HTML元素"><a href="#二、HTML元素" class="headerlink" title="二、HTML元素"></a>二、HTML元素</h4><p>HTML 元素指的是从开始标签（start tag）到结束标签（end tag）的所有代码。开始标签常被称为开放标签（opening tag），结束标签常称为闭合标签（closing tag）。</p><p><strong>元素语法</strong></p><ul><li><p>HTML 元素以<em>开始标签</em>起始</p></li><li><p>HTML 元素以<em>结束标签</em>终止</p><p><strong><em>（包括标签都是元素的一部分）</em></strong></p></li><li><p><em>元素的内容</em>是开始标签与结束标签之间的内容</p></li><li><p>某些 HTML 元素具有<em>空内容（empty content）</em>（在HTML元素中，没有内容的 HTML 元素被称为空元素。）</p></li><li><p>空元素<em>在开始标签中进行关闭</em>（以开始标签的结束而结束）</p></li><li><p>大多数 HTML 元素可拥有<em>属性</em></p></li></ul><p>大多数 HTML 元素可以嵌套（可以包含其他 HTML 元素）。</p><h4 id="三、HTML-属性"><a href="#三、HTML-属性" class="headerlink" title="三、HTML 属性"></a>三、HTML 属性</h4><p>HTML 标签可以拥有<em>属性</em>。属性提供了有关 HTML 元素的<em>更多的信息</em>。</p><p>属性总是以<strong>名称/值对</strong>的形式出现，比如：<em>name=”value”</em>。</p><p>属性总是在 HTML 元素的<em>开始标签</em>中规定。</p><ul><li><p>属性值应该始终被包括在引号内。双引号是最常用的，不过使用单引号也没有问题。在某些个别的情况下，比如属性值本身就含有双引号，那么您必须使用单引号，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name&#x3D;&#39;Bill &quot;HelloWorld&quot; Gates&#39;</span><br></pre></td></tr></table></figure></li></ul><table><thead><tr><th align="left">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.w3school.com.cn/tags/att_standard_accesskey.asp" target="_blank" rel="noopener">accesskey</a></td><td align="left">规定激活元素的快捷键。用Alt+“ ”来快捷访问。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/tags/att_standard_class.asp" target="_blank" rel="noopener">class</a></td><td align="left">规定元素的一个或多个类名（引用样式表中的类）。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/tags/att_global_contenteditable.asp" target="_blank" rel="noopener">contenteditable</a></td><td align="left">规定元素内容是否可编辑。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/tags/att_global_contextmenu.asp" target="_blank" rel="noopener">contextmenu</a></td><td align="left">规定元素的上下文菜单。上下文菜单在用户点击元素时显示。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/tags/att_global_data.asp" target="_blank" rel="noopener">data-*</a></td><td align="left">用于存储页面或应用程序的私有定制数据。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/tags/att_standard_dir.asp" target="_blank" rel="noopener">dir</a></td><td align="left">规定元素中内容的文本方向。rtl：文本从左往右；ltr：文本从右往左。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/tags/att_global_draggable.asp" target="_blank" rel="noopener">draggable</a></td><td align="left">规定元素是否可拖动。链接和图像默认是可拖动的。draggable 属性常用在拖放操作中。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/tags/att_global_dropzone.asp" target="_blank" rel="noopener">dropzone</a></td><td align="left">规定在拖动被拖动数据时是否进行复制、移动或链接。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/tags/att_global_hidden.asp" target="_blank" rel="noopener">hidden</a></td><td align="left">规定元素仍未或不再相关。hidden 属性也可用于防止用户查看元素，直到匹配某些条件（比如选择了某个复选框）。然后，JavaScript 可以删除 hidden 属性，以使此元素可见。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/tags/att_standard_id.asp" target="_blank" rel="noopener">id</a></td><td align="left">规定元素的<strong>唯一</strong> id。id 属性可用作链接锚（link anchor），通过 JavaScript（HTML DOM）或通过 CSS 为带有指定 id 的元素改变或添加样式。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/tags/att_standard_lang.asp" target="_blank" rel="noopener">lang</a></td><td align="left">规定元素内容的语言。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/tags/att_global_spellcheck.asp" target="_blank" rel="noopener">spellcheck</a></td><td align="left">规定是否对元素进行拼写和语法检查。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/tags/att_standard_style.asp" target="_blank" rel="noopener">style</a></td><td align="left">规定元素的行内 CSS 样式。style 属性规定元素的行内样式（inline style）。style 属性将覆盖任何全局的样式设定，例如在style标签或在外部样式表中规定的样式。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/tags/att_standard_tabindex.asp" target="_blank" rel="noopener">tabindex</a></td><td align="left">规定元素的 tab 键次序。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/tags/att_standard_title.asp" target="_blank" rel="noopener">title</a></td><td align="left">规定有关元素的额外信息。这些信息通常会在鼠标移到元素上时显示一段工具<strong>提示文本</strong>（tooltip text）。title 属性常与 form 以及 a 元素一同使用，以提供关于输入格式和链接目标的信息。同时它也是 abbr 和 acronym 元素的必需属性。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/tags/att_global_translate.asp" target="_blank" rel="noopener">translate</a></td><td align="left">规定是否应该翻译元素内容。</td></tr></tbody></table><h4 id="四、HTML-标题"><a href="#四、HTML-标题" class="headerlink" title="四、HTML 标题"></a>四、HTML 标题</h4><p>浏览器会自动地在标题的前后添加空行。</p><p>默认情况下，HTML 会自动地在块级元素前后添加一个额外的空行，比如段落、标题元素前后。</p><p>用<hr/> 标签在 HTML 页面中创建水平线。（<strong>注意这里标签需要闭合，中间不能有空格</strong>）（好像看到这东西不建议使用，但想想也确实，一个网页中那么多需要有那么多需要考虑格式的地方，如果单纯的只用这些标签来完成，是不现实的,<strong>实际上是用级联样式表CSS完成的</strong>）（<strong>随便打开一个网页，里面根本没使用hr br这样的标签，注释的方式倒是很多</strong>）</p><h4 id="五、HTML-段落"><a href="#五、HTML-段落" class="headerlink" title="五、HTML 段落"></a>五、HTML 段落</h4><p>浏览器会自动地在段落的前后添加空行。虽然闭合标签不加浏览器也能识别，但还是一定要注意添加。</p><p>如果您希望在不产生一个新段落的情况下进行换行（新行），可以使用br标签：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>This is<span class="tag">&lt;<span class="name">br</span> /&gt;</span>a para<span class="tag">&lt;<span class="name">br</span> /&gt;</span>graph with line breaks<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>额外空行/空格会被处理为一个空格！</strong></p><p>对于 HTML，您无法通过在 HTML 代码中添加额外的空格或换行来改变输出的效果。</p><p>当显示页面时，浏览器会移除<em>源代码中</em>多余的空格和空行。所有连续的空格或空行都会被算作一个空格。需要注意的是，HTML 代码中的所有连续的空行（换行）也被显示为一个空格。（包括段落里的内容）<strong>这时可以使用<pre></pre>预格式文本，这样可以保留空格和换行</strong></p><h4 id="六、HTML-样式"><a href="#六、HTML-样式" class="headerlink" title="六、HTML 样式"></a>六、HTML 样式</h4><p><strong>这个应该才是html中调整布局、形状 、颜色的属性，之前Django中的静态文件中经常见到这个</strong></p><ul><li><p>style 属性的作用：<strong>提供了一种改变所有 HTML 元素的样式的通用方法。</strong></p></li><li><p>样式是 HTML 4 引入的，它是一种新的首选的改变 HTML 元素样式的方式。通过 HTML 样式，能够通过使用 style 属性直接将样式添加到 HTML 元素，或者间接地在独立的样式表中（CSS 文件）进行定义。</p></li><li><p><strong>应该避免使用下面这些标签和属性：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;center&gt;：定义居中的内容。</span><br><span class="line">&lt;font&gt;和&lt;basefont&gt;：定义HTML字体。</span><br><span class="line">&lt;s&gt;和&lt;strike&gt;：定义删除线文本</span><br><span class="line">&lt;u&gt;：定义下划线文本</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">align</td><td align="left">定义文本的对齐方式</td></tr><tr><td align="left">bgcolor</td><td align="left">定义背景颜色</td></tr><tr><td align="left">color</td><td align="left">定义文本颜色</td></tr></tbody></table></li></ul><p><strong>为什么hrml会有一部风标签被废除?<br>因为html只有一个作用,就是用来添加语义的,早期一些html标签是没有语义的,是用来修改样式的,所以这部分标签就被淘汰了</strong></p><p><strong>样式实例：</strong></p><table><thead><tr><th>功能</th><th>属性</th></tr></thead><tbody><tr><td>背景颜色</td><td>background-color</td></tr><tr><td>字体</td><td>front-family</td></tr><tr><td>文本颜色</td><td>color</td></tr><tr><td>文本尺寸</td><td>font-size</td></tr><tr><td>文本对齐</td><td>text-align</td></tr></tbody></table><h4 id="七、HTML-文本格式化"><a href="#七、HTML-文本格式化" class="headerlink" title="七、HTML 文本格式化"></a>七、HTML 文本格式化</h4><h5 id="（1）文本格式化标签"><a href="#（1）文本格式化标签" class="headerlink" title="（1）文本格式化标签"></a>（1）文本格式化标签</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">标签描述</span><br><span class="line">&lt;b&gt;定义粗体文本。</span><br><span class="line">&lt;big&gt;定义大号字。</span><br><span class="line">&lt;em&gt;定义着重文字。</span><br><span class="line">&lt;i&gt;定义斜体字。</span><br><span class="line">&lt;small&gt;定义小号字。</span><br><span class="line">&lt;strong&gt;定义加重语气。</span><br><span class="line">&lt;sub&gt;定义下标字。</span><br><span class="line">&lt;sup&gt;定义上标字。</span><br><span class="line">&lt;ins&gt;定义插入字。</span><br><span class="line">&lt;del&gt;定义删除字。</span><br><span class="line">&lt;s&gt;不赞成使用。使用 &lt;del&gt; 代替。</span><br><span class="line">&lt;strike&gt;不赞成使用。使用 &lt;del&gt; 代替。</span><br><span class="line">&lt;u&gt;不赞成使用。使用样式（style）代替。</span><br></pre></td></tr></table></figure><h5 id="（2）“计算机输出”标签"><a href="#（2）“计算机输出”标签" class="headerlink" title="（2）“计算机输出”标签"></a>（2）“计算机输出”标签</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">标签描述</span><br><span class="line">&lt;code&gt;定义计算机代码。</span><br><span class="line">&lt;kbd&gt;定义键盘码。</span><br><span class="line">&lt;samp&gt;定义计算机代码样本。</span><br><span class="line">&lt;tt&gt;定义打字机代码。</span><br><span class="line">&lt;var&gt;定义变量。</span><br><span class="line">&lt;pre&gt;定义预格式文本。</span><br><span class="line">&lt;listing&gt;不赞成使用。使用 &lt;pre&gt; 代替。</span><br><span class="line">&lt;plaintext&gt;不赞成使用。使用 &lt;pre&gt; 代替。</span><br><span class="line">&lt;xmp&gt;不赞成使用。使用 &lt;pre&gt; 代替。</span><br></pre></td></tr></table></figure><h5 id="（3）引用、引用和术语定义"><a href="#（3）引用、引用和术语定义" class="headerlink" title="（3）引用、引用和术语定义"></a>（3）引用、引用和术语定义</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">标签描述</span><br><span class="line">&lt;abbr&gt;定义缩写。</span><br><span class="line">&lt;acronym&gt;定义首字母缩写。</span><br><span class="line">&lt;address&gt;定义地址。</span><br><span class="line">&lt;bdo&gt;定义文字方向。</span><br><span class="line">&lt;blockquote&gt;定义长的引用。</span><br><span class="line">&lt;q&gt;定义短的引用语。</span><br><span class="line">&lt;cite&gt;定义引用、引证。</span><br><span class="line">&lt;dfn&gt;定义一个定义项目。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> basic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Auto Minesweeper</title>
      <link href="/2020/02/28/minesweeper/"/>
      <url>/2020/02/28/minesweeper/</url>
      
        <content type="html"><![CDATA[<p>数据结构课设要求完成<strong>扫雷游戏的自动扫雷功能</strong>。问题是从游戏中来，使用的方法自然也就是我在玩游戏时的思路。思路其实很简单，阅读下文中的引用就能理解。如果是想体验一下整个思考的过程，阅读下文中<strong><em>加粗斜体</em></strong>部分或许能给你一些启发。</p><h4 id="一、心路历程"><a href="#一、心路历程" class="headerlink" title="一、心路历程"></a>一、心路历程</h4><p>首先给出我在思考这个问题后列出的大概提纲，也就是代码中需要做什么事情（只是大纲，所以写的有些不通顺，但是如果get到这个点，就没必要看下面的具体思路了😂）</p><blockquote><p>首先找可以确定的地雷的位置，生成一个数组<br>然后找周围地雷数等于这个节点值的位置，将它周围没有点的位置加入到一个数组中，这个数组中的点就是一定可以点的位置</p></blockquote><p>是的，非常简短的思路，有了这个大致思路，问题也就很明了。</p><h4 id="二、具体思路"><a href="#二、具体思路" class="headerlink" title="二、具体思路"></a>二、具体思路</h4><h5 id="（一）确定地雷位置"><a href="#（一）确定地雷位置" class="headerlink" title="（一）确定地雷位置"></a>（一）确定地雷位置</h5><p>首先明确我们现在有什么，根据最后封装的函数：</p><p><code>void machine(int GamePanel[30][30], int n, int m, int &amp;x, int &amp;y);</code></p><p>我们现在有的是一个棋盘GamePanel，知道已经点开的方块，以及该店周围的地雷数量；以及未点开的方块，用-1来表示。</p><p><strong><em>地雷的位置是根据已经点开的点所确定</em></strong>。在这里可以先不看下面的内容，根据这个提示想想如何确定地雷位置。</p><blockquote><p>遍历棋盘中已经点开的方块p，统计方块p周围没有点开的方块的数量，如果为点开的方块数量等于方块p周围的地雷数量k，那么就说明这些未点开的方块都是地雷。</p></blockquote><p>这时所得到的地雷都是显式的，我们在游戏中就能够一眼看出来的地雷，这时无法确定的地雷，之后有可能根据之后点出的点然后找出来，但也<strong>有可能根本无法确定</strong>，对于无法寻找地雷的探讨放在最后的结果分析。</p><h5 id="（二）确定可选点位置"><a href="#（二）确定可选点位置" class="headerlink" title="（二）确定可选点位置"></a>（二）确定可选点位置</h5><p>现在知道了一些地雷的位置，接下来就是根据这些地雷，找出那些点是下一个可选点。</p><p><strong><em>思路和确定地雷位置相同，根据已知地雷位置来去确定可选点位置</em></strong>。还是根据提示想想如何实现。</p><blockquote><p>遍历棋盘中已经点开的方块P，统计方块P周围没有点开的方块数x，以及方块p周围确定的地雷数y。如果未点开的方块数x大于方块P周围已经确定的地雷数y，那么就说明方块P周围得方块，除去周围的地雷，剩下的都是可选点。</p></blockquote><p>这时确定的可选点不止一个，之后需要选择其中的一个点作为返回值。个人认为在选择可选点的时候，除了直接随机一个可选点之外，可以思考一种选择的策略，这个可能是后期优化的一个点吧。</p><h5 id="（三）后期优化"><a href="#（三）后期优化" class="headerlink" title="（三）后期优化"></a>（三）后期优化</h5><p>这里大致给出几个我认为可能会对胜率以及步数有提升的点：</p><p>1、上文中提到的选择可选点时的优化，除了直接随机一个可选点之外，<del>可以思考一种选择的策略</del>，<strong>现在已经已经有策略咯！！！！！</strong>；</p><p>2、后文胜率分析中会有对于扫雷失败的分析，通过分析我们可以看到，最终剩下的未点方块和地雷数都是很少的，瀚汶带佬提出的分析特定的方块组合范式（相邻几个方块以一种规律排列，比如比如 1 2 1 、3 3 3 、4 3），根据分析可以得到地雷的位置。<strong>但是</strong>，这种分析并不是万能的，<strong>有些范式会对应多解</strong>，具体内容下文讨论。</p><p>3、没有确定地雷，或者是没有可选点怎么办。最开始的时候，我是直接选择了最左上角的方块，此时我统计出的步数平均值稳定在92步左右，后来将他改成从未选点中随机一个方块，这时步数平均值稳定在89步左右（提升或许有些小）</p><p>……（希望有缘人还能找到更多优化的方法）</p><h4 id="三、结果分析"><a href="#三、结果分析" class="headerlink" title="三、结果分析"></a>三、结果分析</h4><p>测试使用的是要求的20*20棋盘，50颗地雷。</p><p>首先给出进行10000次自动扫雷的统计结果：</p><p><img src="https://i.loli.net/2020/02/28/m3DspwMqEoQy7jU.png" alt="gaitubao_VmEf1Ts97xjJrhQ.png"></p><p>从数据中可以看到，<strong>第一步就爆雷的比例非常大</strong>（按匿名同学所说，就是50/400=12.5%左右），这是因为第一步你没有任何点开的方块，算法的决策没有依据，只能随机一个可选点。这个随机出的点完全取决于个人的脸黑程度，与算法的效率无关，故我在统计胜率时将这部分失败的样本舍去。</p><p><strong>首先分析为什么会输。</strong>在得出大概思路的时候，我认为优化的方向应该只是如何让赢的步数降低，但是没想到，每一次测试，会有那么多扫雷失败的情况。这时我就想到了自己在游戏时找不到地雷只能蒙的场景：或许这个就是为什么胜率如此低的原因。给出一个例子勾起大家的回忆（例子仍从匿名群友处获得）：</p><p><img src="https://i.loli.net/2020/02/28/AaIoSN3puQ6Pc8i.png" alt="gaitubao_GJZ8FDTMNgcqUSH _1_.png"></p><p>此时还有三部分没有解决，右下角根据交涉某个位置有地雷来分析出地雷的位置如下：</p><p><img src="https://i.loli.net/2020/02/28/gw6Z2mLSlrtFQIe.jpg" alt="gaitubao_4164F094C69CAE5328ADA9F3202FC398 - 副本.png"></p><p>左边和右上角的部分是死局，无法解决，我们来分析这两个部分是如何导致死局的。这两部分都是由左右两个方块组成的，同时看到，当前还有6个雷没有找出，问题就出在左右两个方块无论假设哪一个是地雷都能使局面成立。这就是不唯一解的由来。</p><p><strong>接下来分析胜局的步数情况</strong>。统计步数后，转换为统计图：</p><p><img src="https://i.loli.net/2020/02/28/QbjyuEUgoRc7nVN.png" alt="gaitubao_apLIi4EhGUBlC21 _1_.png"></p><p><em>横坐标为胜局步数，纵坐标为此步数胜局数。</em>非常明显，这是一个高斯分布，最终进行测试的时候，大家的统计情况也就是这样，所以最终成绩的分布自然也是符合高斯分布。</p><p>这个问题也就解决了，之后如还有优化还会继续添加，如果有还得优化方案也欢迎大家联系我！</p><h4 id="四、后期优化"><a href="#四、后期优化" class="headerlink" title="四、后期优化"></a>四、后期优化</h4><p>完成machine函数之后，为了模拟老师最终测试的形式，编写了一份<strong>模拟1000次老师测试</strong>（每一次随机十个棋盘进行自动游戏），最后，满分的比例稳定在<strong>71%</strong>。作为最后的结果，明显是不够好的。之后的几天总会思考优化的问题，就如我之前所说的优化方法，我尝试从这些方向找到可行的办法，其中1和3是针对于步数的优化， 2是针对于胜率的优化，并且3已经实现。所以最后剩下对步数的优化只有方法1，并且我得到了一种确实可行的优化方法：<strong>原本程序中确定可选点，是从可选点数组中随机挑选一个。但是在实际的游戏中，在选取可选点的时候，我们总会趋向于选择周围有更多未点开的方块的可选点，因为如果点下这样的方块很有可能会扩展出很多的方块，也就是有可能增加了更多的点开方块。相比于将边界方块（周围地雷数大于0的方块）一个一个点开，点开一个内部周围地雷数为0的方块，总会是更优的选择。这也就是我们新的可选点决策方案。</strong></p><p>具体的实施方案是，判断每个可选点周围未点开的方块个数，将未点开方块个数最多的可选点作为最终的决策方块。</p><p>这样一来，平均步数稳定在<strong>83步</strong>，测试得到满分的比例稳定在<strong>86%</strong>，提升了15%，可以说是很大的提升了！</p><h4 id="五、具体代码"><a href="#五、具体代码" class="headerlink" title="五、具体代码"></a>五、具体代码</h4><p>……之后会有代码查重，避嫌我就暂时不添加进来，提交之后有兴趣的同学可以回来康康具体代码。</p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> basic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django2与Django3之间的不同</title>
      <link href="/2020/02/15/Django-error-2-3/"/>
      <url>/2020/02/15/Django-error-2-3/</url>
      
        <content type="html"><![CDATA[<p>最近在复现别人django的一个电商系统项目，他用的是django2，而我使用的是django3。在调试的过程中，由于这两个版本之间某些语法或者是要求的不同，出现了很多bug。</p><p>从现在开始，这篇博文会写一些我在探索过程中对django2和django3不同点的总结。</p><h4 id="一、url-与path"><a href="#一、url-与path" class="headerlink" title="一、url()与path()"></a>一、<code>url()</code>与<code>path()</code></h4><p><code>url()</code>和<code>path()</code>都是用于实例化urlpatterns的函数。<code>url()</code>是在django1、django2中使用，并且在API文档中明确指出，<strong>在将来的版本中可能不推荐使用</strong>，他还有一个别名为<code>re_path()</code>。<code>path()</code>是django3中使用的函数，是<code>url()</code>的替代品。</p><p>首先需要知道几个问题：</p><p>1、urlpatterns是url配置URLconf中的一个列表，网站生成的请求会遍历urlpartterns寻找匹配的链接，遇到第一个会停下来。然后调用对应的view函数，返回对应的页面。</p><p>2、URLconf指的是默认生成的urls.py文件，在项目初始化（startproject）和应用初始化（startapp）时分别生成。</p><ul><li><p><code>*path(route , view , kwargs = None , name = None)*</code></p><p><img src="https://i.loli.net/2020/02/15/Tjc9J8P25EiA3eC.png" alt="image.png"></p><p><code>path()</code>函数返回要包含在urlpatterns中的元素。</p><p><strong>route参数</strong>应该是一个字符串，包含了一个URL模式。该字符串可能包含尖括号（eg：&lt; username &gt;），以捕获URL的一部分并<strong>将其作为关键字参数发送到view</strong>。尖括号可包含转换器规范（eg：&lt; int:year &gt;），该规范限制了匹配的字符，<strong>还可以更改传递给视图的变量的类型</strong>。例如，&lt; int : year&gt;匹配一串十进制数字并将该值转换为int。</p><p><strong>view参数</strong>是一个<strong>视图函数</strong>或是结果为基于类的视图的<strong>as_view()</strong>。它也可以是一个<strong>django.urls.include()</strong>。</p><p>include()函数是在调用项目中应用的URLconf（也就是对应应用下的urls.py文件）。</p><p><strong>kwargs参数</strong>可以将其他参数<strong>以字典的形式</strong>传递给视图函数。route参数中匹配的关键字、转换器规范转换的匹配字符都是通过kwargs参数来传递。<em>这个参数不是关键参数，可以忽略。</em></p><p><strong>name参数</strong>可以给这个url取一个合适的名字。通过给url取名字，以后在view或者模板中使用这个url，就只需要通过这个名字就可以了。这样做的原因是防止url更改，会导致其他用了这个url的地方都需要更改，但是如果取名字了，就不要做任何改动了。<em>这个参数不是关键参数，可以忽略。</em></p><p><em>附：在python编码中，使用 url = reverse(name) 进行查找 name 对应的url，然后可以用 redirect(url) 进行重定向。</em></p></li><li><p><code>re_path(route, view, kwargs=None, name=None) / url(route, view, kwargs=None, name=None)</code></p><p><code>url()</code>函数也是返回要包含在urlpatterns中的元素。</p><p>其中<em>view、kwargs、name</em>参数与path的用法相同，不同点在于route参数的使用。</p><p><strong>route参数</strong>是一个字符串参数，包含与Python的兼容的正则表达式 re 模块。字符串通常使用原始字符串语法（<code>r&#39;&#39;</code>），以便它们可以包含类似<code>\d</code>的序列，而无需用另一个反斜杠转义反斜杠。进行匹配时，将从正则表达式中捕获的组传递给视图-如果组已命名，则作为命名参数，否则传递为位置参数。这些值将作为字符串传递，而不进行任何类型转换。<em>这样就导致需要掌握正则表达式这个前导知识。</em></p></li></ul><h4 id="二、两个html语句"><a href="#二、两个html语句" class="headerlink" title="二、两个html语句"></a>二、两个html语句</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% load staticfiles %&#125;</span><br><span class="line">&#123;% load static %&#125;</span><br></pre></td></tr></table></figure><p>这两个都是在html文件中的语句，具体的语法我不了解，但我认为应该是加载静态文件目录的语句。当我的html文件中有前一个语句的时候，网页会出现错误：</p><p><img src="https://i.loli.net/2020/02/15/Xm1unhlTbUwS9qs.png" alt="image.png"></p><p>百度后得知，这是由于<strong>load staticfiles</strong>在django2.1就已经被弃用（不建议使用），并且在django3中直接移除，所以才会出现这样的错误。只需要将它改成<strong>load static</strong>就可以。</p><p>同样的，</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% load staticfiles %&#125;</span><br><span class="line">&#123;% load static from staticfiles %&#125;</span><br><span class="line">&#123;% load admin_static %&#125;</span><br></pre></td></tr></table></figure><p>也是相同的情况，不能在django3中使用，都需要将他们的内容替换成<strong>load static</strong>。</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> advanced </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>百题总结-1</title>
      <link href="/2020/02/11/%E7%99%BE%E9%A2%98%E6%80%BB%E7%BB%93-1/"/>
      <url>/2020/02/11/%E7%99%BE%E9%A2%98%E6%80%BB%E7%BB%93-1/</url>
      
        <content type="html"><![CDATA[<p>一学期的努力，于2月5日完成了自己的第一百道题（虽然这一天为了实现一百道疯狂滑水8道简单😂）。<br>这么长时间的刷题可以说是收获颇丰，我从以下几个角度谈一谈刷LeetCode的这个问题。</p><p>1、<strong>代码水平提高</strong>。这个方面是最重要，也是变化最大的一点，从一开始被各种问题打击，到现在对自己代码的自信；从刚开始提交无数次仍然报错，到现在很多题可以一遍过（<em>提交无数次报错还是和题目有关系，有的题就是各种各样你想不到的情况，这些问题真的是要自己去尝试，很多问题当时就是想不到</em>）；这些都是刷题的成长。</p><p>2、<strong>考虑问题更加全面</strong>。编写代码时难免会对问题考虑不全面，有时是问题理解错误，有时是由于代码细节的问题（<em>比如说编写BFS，如果直接将根节点压入队列，而在BFS函数中，仅在节点压队时判断NULL的情况，那么如果根节点为空，那么访问它的子节点时就会报错</em>）。刷题可以很好地解决这个问题，错多了再遇到自然也就有“肌肉记忆”了</p><p>3、<strong>督促自己</strong>。片段的时间可以做一道简单题，或者<strong>看看别人的题解（这一点极为关键）</strong>；中等题难度不一，都是和具体题目有关；大多数困难题都需要大块的时间来做，看题解、再写一遍，后面两步对我的提升非常大。刷LeetCode已经成了我闲下来的必备事情，有时闲着也是闲着，不如刷一刷LeetCode，AC带来的快乐又对刷题有能动的反作用。</p><p>4、<strong>锻炼手速</strong>（<em>手动狗头</em>）。打字速度飞速提升！</p><p>希望不久之后就能有第二百道的总结！</p>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode-over</title>
      <link href="/2020/02/11/LeetCode-over/"/>
      <url>/2020/02/11/LeetCode-over/</url>
      
        <content type="html"><![CDATA[<p>这是关于LeetCode在本博客的<strong>最后一篇文章</strong>，让我们悼念那些让我的博客显得臃肿无比的题解们。<br>但是令人开心的是：他们在新的地方获得新生，那就是使用<em>GitBook</em>做出的一个电子书（官方是这么形容的）。<br>之后刷LeetCode的题解都会发布在这里，我也会将它做成一个专栏，也希望大家能从中有所收获！<br><strong>最后附上链接：</strong> <a href="http://codebiluo.cn/myLeetCode/">http://codebiluo.cn/myLeetCode/</a></p><p>（初始加载会比较慢，请见谅）</p>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity+ARFoundation</title>
      <link href="/2020/02/04/Unity-ARFoundation/"/>
      <url>/2020/02/04/Unity-ARFoundation/</url>
      
        <content type="html"><![CDATA[<p>前两天想要上手Unity来AR方面的<del>项目</del>软件 ，探索过程中出现了各种各样的问题，现在将这个过程中遇到的各种各样问题梳理一下，希望后来者能开开心心上手Unity+AR。<br>注意：这是一篇踩坑博客，具体搭建还请自行百度。</p><h4 id="一、ARFoundation-or-ARCore-or-ARKit"><a href="#一、ARFoundation-or-ARCore-or-ARKit" class="headerlink" title="一、ARFoundation or ARCore or ARKit"></a>一、ARFoundation or ARCore or ARKit</h4><p>Unity作为一个平台，不直接提供XR（包括VR、AR和MR）的开发包，这时就需要其他公司提供各种各样的SDK工具包，国外有苹果公司的ARKit、谷歌公司的ARCore、Unity的ARFoundation，还有最近发现的OpenCVForUnity，而国内有EasyAR这些SDK工具包。ARKit是针对于IOS开发，ARCore是针对于Android开发，而我使用的是ARFoundation，这是Unity将ARKit和ARCore进一步整合的工作平台。<br>（这里就要说到一个应该知道的问题，<strong>IOS开发一定需要Mac，或者是电脑装双系统</strong>，据望网友<del>可靠</del>信息，如果使用虚拟机，龟速运行不说， 还会有很多Bug。）</p><h4 id="二、Android-JDK-amp-NDK"><a href="#二、Android-JDK-amp-NDK" class="headerlink" title="二、Android JDK &amp; NDK"></a>二、Android JDK &amp; NDK</h4><h5 id="1、解决方法"><a href="#1、解决方法" class="headerlink" title="1、解决方法"></a>1、解决方法</h5><p>这是搭建环境过程遇到的最让我头疼的问题，直接原因就是我对进度条的不信任。<br>当你进行Android开发时，需要将项目打包成apk，这时就需要Android JDK &amp; NDK工具包，这时你有两种选择<br>①、自行下载SDK manager和NDK；（这条路让我感受到世界的恶意）<br>②、使用Unity Hub直接下载<strong>Unity 2019.3.0f6 (64-bit)</strong>，这样可以直接添加各种模块；</p><h5 id="2、方法①"><a href="#2、方法①" class="headerlink" title="2、方法①"></a>2、方法①</h5><p>（想要较好解决方法的同学可以直接看方法②）<br>SDK和NDK下载可以直接从官网下载，建议使用Goole浏览器的迅雷插件，这样可以快一点。<br>SDK：<a href="https://www.androiddevtools.cn/" target="_blank" rel="noopener">https://www.androiddevtools.cn/</a><br>NDK：<a href="https://developer.android.google.cn/ndk/downloads/" target="_blank" rel="noopener">https://developer.android.google.cn/ndk/downloads/</a><br>下载SDK Tools后打开SDK manager再下载需要的对应工具，尽量下载最新版本。<br>下载NDK之后，就会遇到一个第一个问题：<strong>NDK版本不正确</strong><br><img src="https://img-blog.csdnimg.cn/2020020411555648.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTc1OTI2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>令人震惊的是，Unity要求的NDK版本的小版本号怎么这么长！（黑人问号脸）还能把所有小版本都发布吗！这就导致我花费了大量时间在下载NDK，大版本错完小版本错，小版本错完之后还有错。</p><h5 id="3、方法②"><a href="#3、方法②" class="headerlink" title="3、方法②"></a>3、方法②</h5><p>对比之下，方法②就非常好。下载了Unity Hub之后，添加Android Build Support以及其分目录的模块后，直接下载<strong>Unity 2019.3.0f6 (64-bit)</strong>或者是<strong>Unity 2019.2.20f1 (64-bit)</strong>。下载的过程比较漫长，需要耐心等待，但是面包总会有的。下载到五分之四的时候，进度条就会卡住，而由于我对进度条的不信任，我就直接取消下载转到方法一。。。<br>所以使用这个方法你只要相信进度条即可。</p><h4 id="三、Mininum-API-Level"><a href="#三、Mininum-API-Level" class="headerlink" title="三、Mininum API Level"></a>三、Mininum API Level</h4><p>配置环境的过程，有一个步骤时设置Mininum API Level，而我想的是设置的小一些，一定不会有问题，但事实不是如此。当我将其设置为最小的API Level 19：<br><img src="https://img-blog.csdnimg.cn/20200204121749589.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTc1OTI2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>在编译运行的时候，会出现报错：<br><img src="https://img-blog.csdnimg.cn/20200204121842202.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTc1OTI2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这时需要将Mininum API Level设置的大一些，比如<strong>我设置的是API Level 24</strong>，就可以成功编译。</p><h4 id="四、Building-Gradle-Project"><a href="#四、Building-Gradle-Project" class="headerlink" title="四、Building Gradle Project"></a>四、Building Gradle Project</h4><p>最终编译的时候，进度条再一次卡住/(ㄒoㄒ)/~~，这时编译进行到<strong>Building Gradle Project</strong>，Unity会直接卡死。</p><blockquote><p>Gradle是一个基于JVM的构建工具，是一款通用灵活的构建工具，支持maven， Ivy仓库，支持传递性依赖管理，而不需要远程仓库或者是pom.xml和ivy.xml配置文件，基于Groovy，build脚本使用Groovy编写。——百度百科</p></blockquote><p>而编译卡在这里的原因由于本地并没有Gradle，所以编译时需要下载，而外网资源下载速度我不用再提，<strong>据网友信息，他编译数小时后成功了！</strong> 真是很短的时间呢！<br>但我采取了其他的方法：<strong>预先下载Gradle</strong>。<br>我下载的是gradle-5.4.1，之后在Edit-&gt;Preferences中将下载内容的地址输入到Gradle中。<img src="https://img-blog.csdnimg.cn/20200204123416425.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTc1OTI2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>辛苦一整天，遇到诸多艰难，所幸克服，没有放弃，坚持走下去咯！</strong></p>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django-4</title>
      <link href="/2020/01/27/Django-4/"/>
      <url>/2020/01/27/Django-4/</url>
      
        <content type="html"><![CDATA[<h4 id="•-编写一个用于问题显示的表单（form）"><a href="#•-编写一个用于问题显示的表单（form）" class="headerlink" title="• 编写一个用于问题显示的表单（form）"></a>• 编写一个用于问题显示的表单（form）</h4><p>form是HTML的一个元素，修改<em>polls/detail.html</em></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; question.question_text &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">&#123;% if error_message %&#125;<span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>&#123;&#123; error_message &#125;&#125;<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span>&#123;% endif %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"&#123;% url 'polls:vote' question.id %&#125;"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">&#123;% csrf_token %&#125;</span><br><span class="line">&#123;% for choice in question.choice_set.all %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"choice"</span> <span class="attr">id</span>=<span class="string">"choice&#123;&#123; forloop.counter &#125;&#125;"</span> <span class="attr">value</span>=<span class="string">"&#123;&#123; choice.id &#125;&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"choice&#123;&#123; forloop.counter &#125;&#125;"</span>&gt;</span>&#123;&#123; choice.choice_text &#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Vote"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这部分涉及HTML相关内容，不再赘述</p><h4 id="•-添加投票界面的相关内容"><a href="#•-添加投票界面的相关内容" class="headerlink" title="• 添加投票界面的相关内容"></a>• 添加投票界面的相关内容</h4><p>添加关于<em>polls/views.py</em>的vote()函数的相关实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse, HttpResponseRedirect</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> get_object_or_404, render</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> reverse</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Choice, Question</span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">vote</span><span class="params">(request, question_id)</span>:</span></span><br><span class="line">    question = get_object_or_404(Question, pk=question_id)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        selected_choice = question.choice_set.get(pk=request.POST[<span class="string">'choice'</span>])</span><br><span class="line">    <span class="keyword">except</span> (KeyError, Choice.DoesNotExist):</span><br><span class="line">        <span class="comment"># Redisplay the question voting form.</span></span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">'polls/detail.html'</span>, &#123;</span><br><span class="line">            <span class="string">'question'</span>: question,</span><br><span class="line">            <span class="string">'error_message'</span>: <span class="string">"You didn't select a choice."</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        selected_choice.votes += <span class="number">1</span></span><br><span class="line">        selected_choice.save()</span><br><span class="line">        <span class="comment"># Always return an HttpResponseRedirect after successfully dealing</span></span><br><span class="line">        <span class="comment"># with POST data. This prevents data from being posted twice if a</span></span><br><span class="line">        <span class="comment"># user hits the Back button.</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponseRedirect(reverse(<span class="string">'polls:results'</span>, args=(question.id,)))</span><br></pre></td></tr></table></figure><p>相关内容说明：<br>1、<strong>request.POST</strong>是类似于字典的对象，可让您通过键名访问提交的数据。在这种情况下， <strong>request.POST[‘choice’]</strong>以字符串形式返回所选选项的<strong>ID</strong>。<strong>request.POST</strong>值始终是字符串。</p><p>请注意，<strong>Django</strong>还提供<strong>request.GET</strong>了以相同方式访问<strong>GET</strong>数据的方法-但我们<strong>request.POST</strong>在代码中明确使用，以确保仅通过<strong>POST</strong>调用更改数据。</p><p>2、如果没有提供<strong>POST</strong>数据，那么就会产生<strong>KEYERROR</strong>异常，重新显示问题表单。</p><p>3、在此示例reverse()中，我们在<strong>HttpResponseRedirect</strong>构造函数中使用该函数 。此功能有助于避免在视图功能中对URL进行硬编码。它提供了我们想要将控制权传递给的视图的名称，以及指向该视图的URL模式的可变部分。在这种情况下，使用我们在教程3中设置的<strong>URLconf</strong> ，此<strong>reverse()</strong>调用将返回一个字符串，例如’/polls/3/results/‘，其中3是的值<strong>question.id</strong>。然后，此重定向的URL将调用<strong>‘results’</strong>视图以显示最后一页。</p><h4 id="•-投票结果页面相关内容"><a href="#•-投票结果页面相关内容" class="headerlink" title="• 投票结果页面相关内容"></a>• 投票结果页面相关内容</h4><p>进行投票之后，vote()视图将重定向到该问题的结果页面，故编写视图在<em>views.py</em>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> get_object_or_404, render</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">results</span><span class="params">(request, question_id)</span>:</span></span><br><span class="line">    question = get_object_or_404(Question, pk=question_id)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'polls/results.html'</span>, &#123;<span class="string">'question'</span>: question&#125;)</span><br></pre></td></tr></table></figure><p>同时创建<em>polls/results.html</em>模板：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; question.question_text &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">&#123;% for choice in question.choice_set.all %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; choice.choice_text &#125;&#125; -- &#123;&#123; choice.votes &#125;&#125; vote&#123;&#123; choice.votes|pluralize &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'polls:detail' question.id %&#125;"</span>&gt;</span>Vote again?<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>现在可以运行服务器，来看一看问题页面、投票页面和投票结果显示页面，</p><h4 id="•-使用通用视图来减少代码量"><a href="#•-使用通用视图来减少代码量" class="headerlink" title="• 使用通用视图来减少代码量"></a>• 使用通用视图来减少代码量</h4><p>在 <strong>detail()</strong> 和 <strong>results()</strong> 的视图函数是非常短并且相似，所以重复的代码是冗余的。<br>这些视图代表了基本Web开发的一种常见情况：根据URL中传递的参数从数据库获取数据，加载模板并返回渲染的模板。因为这很常见，所以Django提供了一个捷径，称为“<strong>通用视图</strong>”系统。<br>为了转换为通用视图系统，需要经过一些步骤：<br>    1. 转换URLconf。<br>    2. 删除一些旧的不需要的视图。<br>    3. 根据Django的通用视图介绍新视图。 </p><p><strong>修改URL配置</strong><br>首先对<em>polls/urls.py</em>的URLconf进行修改：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line">app_name = <span class="string">'polls'</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">''</span>, views.IndexView.as_view(), name=<span class="string">'index'</span>),</span><br><span class="line">    path(<span class="string">'&lt;int:pk&gt;/'</span>, views.DetailView.as_view(), name=<span class="string">'detail'</span>),</span><br><span class="line">    path(<span class="string">'&lt;int:pk&gt;/results/'</span>, views.ResultsView.as_view(), name=<span class="string">'results'</span>),</span><br><span class="line">    path(<span class="string">'&lt;int:question_id&gt;/vote/'</span>, views.vote, name=<span class="string">'vote'</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>修改的是将更改<question_id>为<pk>。</p><p><strong>修改视图</strong><br>将<em>polls/views.py</em>修改为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponseRedirect</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> get_object_or_404, render</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> reverse</span><br><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> generic</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Choice, Question</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexView</span><span class="params">(generic.ListView)</span>:</span></span><br><span class="line">    template_name = <span class="string">'polls/index.html'</span></span><br><span class="line">    context_object_name = <span class="string">'latest_question_list'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_queryset</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""Return the last five published questions."""</span></span><br><span class="line">        <span class="keyword">return</span> Question.objects.order_by(<span class="string">'-pub_date'</span>)[:<span class="number">5</span>]</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DetailView</span><span class="params">(generic.DetailView)</span>:</span></span><br><span class="line">    model = Question</span><br><span class="line">    template_name = <span class="string">'polls/detail.html'</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ResultsView</span><span class="params">(generic.DetailView)</span>:</span></span><br><span class="line">    model = Question</span><br><span class="line">    template_name = <span class="string">'polls/results.html'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">vote</span><span class="params">(request, question_id)</span>:</span></span><br><span class="line">    ... <span class="comment"># same as above, no changes needed.</span></span><br></pre></td></tr></table></figure><p>在这里使用了两个通用视图<strong>ListView</strong>和<strong>DetailView</strong>，分别抽象了“显示对象列表”和“显示特定类型的对象的详细信息页面”的概念。</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> basic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django-3</title>
      <link href="/2020/01/22/Django-3/"/>
      <url>/2020/01/22/Django-3/</url>
      
        <content type="html"><![CDATA[<h2 id="•-视图"><a href="#•-视图" class="headerlink" title="• 视图"></a>• 视图</h2><p><strong>视图其实是视图函数的简称</strong>，视图是Django应用程序中网页的“类型”，通常具有特定功能并具有特定模板。<br>在Django中，网页和其他内容是通过视图传递的。每个视图均由Python函数（或方法（对于基于类的视图而言））表示。Django将通过检查所请求的URL（准确地说，是域名之后的URL部分）来选择视图。</p><h2 id="•-URL"><a href="#•-URL" class="headerlink" title="• URL"></a>• URL</h2><p><strong>URL即统一资源定位符</strong>，是每一个信息资源都有统一的且在网上唯一的地址。<br><strong>URLconfs即URL模式</strong>，是URL的一般形式Django提供了更加优雅的URL模式，例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/newsarchive/<span class="tag">&lt;<span class="name">year</span>&gt;</span>/<span class="tag">&lt;<span class="name">month</span>&gt;</span>/</span><br></pre></td></tr></table></figure><h2 id="•-添加更多的视图"><a href="#•-添加更多的视图" class="headerlink" title="• 添加更多的视图"></a>• 添加更多的视图</h2><p>更改<em>views.py</em>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">detail</span><span class="params">(request, question_id)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">"You're looking at question %s."</span> % question_id)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">results</span><span class="params">(request, question_id)</span>:</span></span><br><span class="line">    response = <span class="string">"You're looking at the results of question %s."</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(response % question_id)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">vote</span><span class="params">(request, question_id)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">"You're voting on question %s."</span> % question_id)</span><br></pre></td></tr></table></figure><p>并更改<em>polls.urls.py</em>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># ex: /polls/</span></span><br><span class="line">    path(<span class="string">''</span>, views.index, name=<span class="string">'index'</span>),</span><br><span class="line">    <span class="comment"># ex: /polls/5/</span></span><br><span class="line">    path(<span class="string">'&lt;int:question_id&gt;/'</span>, views.detail, name=<span class="string">'detail'</span>),</span><br><span class="line">    <span class="comment"># ex: /polls/5/results/</span></span><br><span class="line">    path(<span class="string">'&lt;int:question_id&gt;/results/'</span>, views.results, name=<span class="string">'results'</span>),</span><br><span class="line">    <span class="comment"># ex: /polls/5/vote/</span></span><br><span class="line">    path(<span class="string">'&lt;int:question_id&gt;/vote/'</span>, views.vote, name=<span class="string">'vote'</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>根据输入的URL地址，<strong>通过遍历的方式寻找匹配的URL模式串</strong>，并调用相对应的视图函数，相应相对应的网页。<br>比如说，当有人从网站请求页面时，例如“ / polls / 34 /”，Django将加载<em>mysite.urls</em>的Python模块，因为该<em>ROOT_URLCONF</em>设置指向该模块 。它找到名为的变量urlpatterns并按顺序遍历模式。在找到匹配项之后’polls/‘，它将剥离匹配的文本（”polls/“），并将其余文本–发送 “34/“到’polls.urls’URLconf进行进一步处理。在那里匹配’<a href="int:question_id">int:question_id</a>/‘，从而导致对detail()视图的调用，如下所示：<br>detail(request=<HttpRequest object>, question_id=34)</p><h2 id="•-编写更强大的视图"><a href="#•-编写更强大的视图" class="headerlink" title="• 编写更强大的视图"></a>• 编写更强大的视图</h2><p>每个视图负责执行以下两项操作之一：<strong>返回HttpResponse包含所请求页面内容的对象，或者引发诸如之类的异常Http404</strong>。<br>HttpResponse需要自己对其进行填充，而HttpRequest是Django自己生成。<br>视图可以从数据库中读取记录，也可以使用Django等模板系统，也可以不使用第三方Python模板系统。它还可以使用所需的任何Python库生成PDF文件，输出XML，或即时创建ZIP文件。<br>在<em>view.py</em>添加代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    latest_question_list = Question.objects.order_by(<span class="string">'-pub_date'</span>)[:<span class="number">5</span>]</span><br><span class="line">    output = <span class="string">', '</span>.join([q.question_text <span class="keyword">for</span> q <span class="keyword">in</span> latest_question_list])</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(output)</span><br><span class="line">    <span class="comment"># Leave the rest of the views (detail, results, vote) unchanged</span></span><br></pre></td></tr></table></figure><h2 id="•-将模板与视图创建的硬编码分开"><a href="#•-将模板与视图创建的硬编码分开" class="headerlink" title="• 将模板与视图创建的硬编码分开"></a>• 将模板与视图创建的硬编码分开</h2><p>首先，在目录templates中创建一个polls目录。Django将在那里寻找模板。<br>您的项目TEMPLATES置描述了Django如何加载和呈现模板。默认设置文件配置一个DjangoTemplates 后端，其APP_DIRS选项设置为 True。按照惯例DjangoTemplates，在每个文件夹中都会寻找一个“模板”子目录INSTALLED_APPS。<br>在<em>polls/templates/polls/</em>添加一个模板：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if latest_question_list %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    &#123;% for question in latest_question_list %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/polls/&#123;&#123; question.id &#125;&#125;/"</span>&gt;</span>&#123;&#123; question.question_text &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>No polls are available.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>现在运行服务器之后，可以子项/polls来加载一个“最新消息”列表。</p><h2 id="•-快捷方式"><a href="#•-快捷方式" class="headerlink" title="• 快捷方式"></a>• 快捷方式</h2><p>加载模板，填充上下文并使用渲染后的模板的结果返回对象HttpResponse是一种非常常见的用法。<br>同时，Django提供了一种快捷方式。重写index()：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    latest_question_list = Question.objects.order_by(<span class="string">'-pub_date'</span>)[:<span class="number">5</span>]</span><br><span class="line">    context = &#123;<span class="string">'latest_question_list'</span>: latest_question_list&#125;</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'polls/index.html'</span>, context)</span><br></pre></td></tr></table></figure><p>该render()函数将<strong>请求对象作为其第一个参数，将模板名称作为其第二个参数，并将字典作为其可选的第三个参数</strong>。它返回使用HttpResponse 给定上下文呈现的给定模板的对象。</p><h2 id="•-404错误"><a href="#•-404错误" class="headerlink" title="• 404错误"></a>• 404错误</h2><p>在<em>views.py</em>中添加代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> Http404</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">detail</span><span class="params">(request, question_id)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        question = Question.objects.get(pk=question_id)</span><br><span class="line">    <span class="keyword">except</span> Question.DoesNotExist:</span><br><span class="line">        <span class="keyword">raise</span> Http404(<span class="string">"Question does not exist"</span>)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'polls/detail.html'</span>, &#123;<span class="string">'question'</span>: question&#125;)</span><br></pre></td></tr></table></figure><p>为了快速使示例正常工作，对应模板<em>polls/templates/polls/detail.html</em><br>中只添加：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; question &#125;&#125;</span><br></pre></td></tr></table></figure><p>现在运行服务器，可以看到更完整的polls网页  </p><h2 id="•-404的快捷方式"><a href="#•-404的快捷方式" class="headerlink" title="• 404的快捷方式"></a>• 404的快捷方式</h2><p>重写detail()函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> get_object_or_404, render</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">detail</span><span class="params">(request, question_id)</span>:</span></span><br><span class="line">    question = get_object_or_404(Question, pk=question_id)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'polls/detail.html'</span>, &#123;<span class="string">'question'</span>: question&#125;)</span><br></pre></td></tr></table></figure><h2 id="•-使用模板系统"><a href="#•-使用模板系统" class="headerlink" title="• 使用模板系统"></a>• 使用模板系统</h2><p><em>polls/detail.html</em>改写为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; question.question_text &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">&#123;% for choice in question.choice_set.all %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; choice.choice_text &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>模板系统使用点查找语法来访问变量属性。在的示例中，首先Django在对象上进行字典查找。如果失败，它将尝试属性查找-在这种情况下可以工作。如果属性查找失败，它将尝试进行列表索引查找。</p><h2 id="•-命名空间URL名称"><a href="#•-命名空间URL名称" class="headerlink" title="• 命名空间URL名称"></a>• 命名空间URL名称</h2><p>在实际的Django项目中，可能有很多个应用程序，Django如何区分它们之间的URL名称呢？答案是将名称空间添加到URLconf中。<br>在polls/urls.py中添加app_name以设置为应用程序名称空间：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> pat</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line">app_name = <span class="string">'polls'</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">''</span>, views.index, name=<span class="string">'index'</span>),</span><br><span class="line">    path(<span class="string">'&lt;int:question_id&gt;/'</span>, views.detail, name=<span class="string">'detail'</span>),</span><br><span class="line">    path(<span class="string">'&lt;int:question_id&gt;/results/'</span>, views.results, name=<span class="string">'results'</span>),</span><br><span class="line">    path(<span class="string">'&lt;int:question_id&gt;/vote/'</span>, views.vote, name=<span class="string">'vote'</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>这样可以区分多个应用程序的URL名称。</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> basic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django-2</title>
      <link href="/2020/01/19/Django-2/"/>
      <url>/2020/01/19/Django-2/</url>
      
        <content type="html"><![CDATA[<h2 id="•-数据库设置"><a href="#•-数据库设置" class="headerlink" title="• 数据库设置"></a>• 数据库设置</h2><p>默认使用SQLite，相关的设置都在<em>setting.py</em>文件中进行。</p><p><em>setting,py</em>中还有其他设置：<br>INSTALLED_APPS文件顶部的设置。该名称包含在此Django实例中激活的所有Django应用程序的名称。其中包含一些默认的应用程序。不需要时可以在INSTALLED_APPS中删去。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure><p>该migrate命令将查看该INSTALLED_APPS设置，并根据<em>mysite/settings.py</em>文件中的数据库设置以及应用程序随附的数据库迁移来创建任何必要的数据库表。</p><h2 id="•-创建模型"><a href="#•-创建模型" class="headerlink" title="• 创建模型"></a>• 创建模型</h2><p>模型是相关数据的唯一、确定的事实来源。它包含要存储数据的基本字段和行为。也就是一个包含各种属性（数据）和方法（行为）的类。<br>比如说：<br>在民意调查应用中，我们将创建两个模型：Question和Choice。Question有一个问题和出版日期。Choice有两个字段：选择的文本和投票提示。每个Choice都与关联Question。</p><p>在<em>polls/models.py</em>文件中添加代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from django.db import models</span><br><span class="line">class Question(models.Model):</span><br><span class="line">    question_text &#x3D; models.CharField(max_length&#x3D;200)</span><br><span class="line">    pub_date &#x3D; models.DateTimeField(&#39;date published&#39;)</span><br><span class="line">class Choice(models.Model):</span><br><span class="line">    question &#x3D; models.ForeignKey(Question, on_delete&#x3D;models.CASCADE)</span><br><span class="line">    choice_text &#x3D; models.CharField(max_length&#x3D;200)</span><br><span class="line">    votes &#x3D; models.IntegerField(default&#x3D;0)</span><br></pre></td></tr></table></figure><p>在这里，==每个模型都是django.db.models.Model的子类==。每个模型都有许多类变量，每个类变量代表模型中的数据库字段。==每一个字段都是一个Field的实例==，不同的Field代表了不同类型的数据。</p><h2 id="•-激活模型"><a href="#•-激活模型" class="headerlink" title="• 激活模型"></a>• 激活模型</h2><p>为了包含应用，需要将应用的引用添加在设置的INSTALLED_APPS中，也就是将<br>polls.apps.PollsConfig添加到INSTALLED_APPS中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS &#x3D; [</span><br><span class="line">    &#39;polls.apps.PollsConfig&#39;,</span><br><span class="line">    &#39;django.contrib.admin&#39;,</span><br><span class="line">    &#39;django.contrib.auth&#39;,</span><br><span class="line">    &#39;django.contrib.contenttypes&#39;,</span><br><span class="line">    &#39;django.contrib.sessions&#39;,</span><br><span class="line">    &#39;django.contrib.messages&#39;,</span><br><span class="line">    &#39;django.contrib.staticfiles&#39;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py makemigrations polls</span><br></pre></td></tr></table></figure><p>表示对模型进行了一些修改，称之为<strong>迁移（migration）</strong>，会生成一个<em>polls/migrations/0001_initial.py</em>文件，可以进行人工编辑。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py sqlmigrate polls 0001</span><br></pre></td></tr></table></figure><p>可以看到SQL中，进行了那些迁移操作。</p><p><strong>注：</strong><br>1、数据表的名称是将应用名称和模型名称的小写组合起来自动生成的；<br>2、Django将附加”_id”到外键字段名称。<br>3、该sqlmigrate命令<strong>==实际上并未在数据库上运行迁移-而是将其打印到屏幕上==</strong>，以便您可以查看SQL Django认为需要的内容。这对于检查Django将要执行的操作或是否有需要SQL脚本进行更改的数据库管理员很有用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py check</span><br></pre></td></tr></table></figure><p>检查项目中是否存在任何问题，而无需进行迁移或接触数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure><p>获取所有尚未应用的迁移，并针对数据库来运行它们，实际上就是根据之前的修改来改变数据库。</p><p>模型更改的三步：<br>    <strong>• 更改模型（在<em>models.py</em>中）。<br>    • 运行为这些更改创建迁移 python manage.py makemigrations<br>    • 运行以将那些更改应用到数据库 python manage.py migrate</strong></p><p>Django Admin介绍<br>admin是作为网站管理员存在</p><h2 id="•-创建管理员用户"><a href="#•-创建管理员用户" class="headerlink" title="• 创建管理员用户"></a>• 创建管理员用户</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py createsuperuser</span><br></pre></td></tr></table></figure><p>之后按提示信息输入内容（在输入密码的时候，可能会有密码无回显的情况，只需正常输入，不会有其他影响，我的环境是Python3.8+Django3.0）</p><p>然后运行服务器，输入<a href="http://127.0.0.1:8000/admin/" target="_blank" rel="noopener">http://127.0.0.1:8000/admin/</a><br>会显示管理员登录界面：<br><img src="https://img-blog.csdnimg.cn/20200115172844937.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTc1OTI2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>注意这里输入的不是，这个网页出现的会是错误页面：<br><img src="https://img-blog.csdnimg.cn/20200115172852382.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTc1OTI2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>修改<em>polls/admin.py</em>之后，应用就可以出现在管理员页面上。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from django.contrib import admin</span><br><span class="line">from .models import Question</span><br><span class="line">admin.site.register(Question)</span><br></pre></td></tr></table></figure><p>之后可以通过管理员界面对Question数据库进行修改。</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> basic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django-1</title>
      <link href="/2020/01/19/Django-1/"/>
      <url>/2020/01/19/Django-1/</url>
      
        <content type="html"><![CDATA[<h2 id="•-创建项目"><a href="#•-创建项目" class="headerlink" title="• 创建项目"></a>• 创建项目</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">django-admin startproject mysite</span><br></pre></td></tr></table></figure><p>创建了mysite目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysite&#x2F;</span><br><span class="line">    manage.py #一个命令行实用程序，可让您以各种方式与该Django项目进行交互。</span><br><span class="line">    mysite&#x2F;</span><br><span class="line">        __init__.py</span><br><span class="line">        settings.py #此Django项目的设置&#x2F;配置。</span><br><span class="line">        urls.py #此Django项目的URL声明；Django支持的网站的“目录”。</span><br><span class="line">        asgi.py</span><br><span class="line">        wsgi.py</span><br></pre></td></tr></table></figure><h2 id="•-运行服务器"><a href="#•-运行服务器" class="headerlink" title="• 运行服务器"></a>• 运行服务器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Python manage.py runserver</span><br></pre></td></tr></table></figure><p>在浏览器中搜索<a href="http://127.0.0.1:8000/，就能看到Django火箭：" target="_blank" rel="noopener">http://127.0.0.1:8000/，就能看到Django火箭：</a><br><img src="https://img-blog.csdnimg.cn/20200105125207937.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTc1OTI2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="•-创建应用程序（polls应用）"><a href="#•-创建应用程序（polls应用）" class="headerlink" title="• 创建应用程序（polls应用）"></a>• 创建应用程序（polls应用）</h2><p>项目和应用之间有什么区别？<strong>应用程序是执行某项操作的Web应用程序</strong>，例如Weblog系统，公共记录数据库或小型民意调查应用程序。<strong>项目是特定网站的配置和应用程序的集合。一个项目可以包含多个应用程序。一个应用程序可以在多个项目中。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py startapp polls</span><br></pre></td></tr></table></figure><p>创建了polls目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">polls&#x2F;</span><br><span class="line">    __init__.py</span><br><span class="line">    admin.py</span><br><span class="line">    apps.py</span><br><span class="line">    migrations&#x2F;</span><br><span class="line">        __init__.py</span><br><span class="line">    models.py</span><br><span class="line">    tests.py</span><br><span class="line">    views.py</span><br></pre></td></tr></table></figure><h2 id="•-第一个视图函数"><a href="#•-第一个视图函数" class="headerlink" title="• 第一个视图函数"></a>• 第一个视图函数</h2><p>每一个请求的url地址，都对应着一个函数，叫视图函数，由视图函数处理请求后，再返回页面内容给浏览器显示。<br>在<strong>polls/views.py</strong>中添加代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from django.http import HttpResponse</span><br><span class="line"></span><br><span class="line">def index(request):</span><br><span class="line">        Return HttpResponse(&quot;Hello,world.You&#39;reatthepollsindex.&quot;)</span><br></pre></td></tr></table></figure><h2 id="•-创建URL关系"><a href="#•-创建URL关系" class="headerlink" title="• 创建URL关系"></a>• 创建URL关系</h2><p>polls目录中创建URLconf，即创建一个urls.py文件，包含如下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from django.urls import path</span><br><span class="line"></span><br><span class="line">from . import views</span><br><span class="line"></span><br><span class="line">urlpatterns&#x3D;[</span><br><span class="line">path(&#39;&#39;,  views.index, name&#x3D;&#39;index&#39;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在项目之下的urls.py文件（mysite/urls.py）中加入代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from django.contrib import admin</span><br><span class="line">from django.urls import include,path</span><br><span class="line"></span><br><span class="line">urlpatterns&#x3D;[</span><br><span class="line">path(&#39;polls&#x2F;&#39;,include(&#39;polls.urls&#39;)),</span><br><span class="line">path(&#39;admin&#x2F;&#39;,admin.site.urls),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>重点：项目和应用之下urls.py文件的不同</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 项目下的urls.py</span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    ...</span><br><span class="line">    # 包含应用下的urls.py文件</span><br><span class="line">    url(正则表达式, include(&#39;应用名.urls&#39;))</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 应用下的urls.py</span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line"> </span><br><span class="line">   # 该path()函数传递了四个参数，两个是必需的 route和view，</span><br><span class="line">   # 以及两个可选的kwargs和name。</span><br><span class="line">   path(route , view , kwargs , name),</span><br><span class="line">        # route：route是包含URL模式的字符串。在处理请求时，</span><br><span class="line">        # Django从第一个模式开始，urlpatterns然后沿列表向下移动，</span><br><span class="line">        # 将请求的URL与每个模式进行比较，直到找到匹配的URL。</span><br><span class="line">        # view：当Django找到匹配的模式时，使用HttpRequest对象作为第一个参数，</span><br><span class="line">        # 并将路线中所有“捕获的”值作为关键字参数，调用指定的view函数。</span><br><span class="line">        # name：命名URL可以使您在Django中的其他地方（尤其是在模板内部）</span><br><span class="line">        # 明确地引用它。这项强大的功能可让您仅触摸单个文件</span><br><span class="line">        # 即可对项目的URL模式进行全局更改。</span><br><span class="line">]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> basic </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
